{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
{
    "brief": [
        "It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone.   ...    The general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.   ...    When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.   ...    The implementation on the computer is done with a custom Windows credential provider and a service.   ...    When a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.   ...    When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file.   ...    Since the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.   ...    The entropy value used in the encryption and decryption of the passwords.   ...    These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.   ...    Since the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process.   ...    Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.   ...    When the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in.   ...    This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.   ...    The login process of VeridiumAD Vulnerability   ...    However, this CSR HTTP request can be made by any domain user.   ...    This vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification.   ...    Afterwards the user gets a button in his HYPR app to log in as the current user for that computer.   ...    The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,.   ...    On the client the certificate is decrypted by the HYPR service and passed to the login process.   ...    The HYPR login process.   ...    This stolen encrypted login certificate can be leveraged to login as another user.   ...    The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.   ...    If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.   ...    the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.   ...    This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.   ...    The app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server.   ...    The HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.   ...    The polling response containing the encrypted login certificate and the encCounter.   ...    With the values in the registry it is possible to deregister the target user from the computer.   ...    Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app.   ...    This certificate is now sent as the polling response to the HYPR service by the server.   ...    For all tested products there is a new way to obtain login credentials of other users as a local Administrator.   ...   ",
        "I\nt\n \ni\ns\n \na\nb\no\nu\nt\n \na\n \ns\np\ne\nc\ni\nf\ni\nc\n \nc\nl\na\ns\ns\n \no\nf\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nw\nh\ni\nc\nh\n \nI\n \nw\ni\nl\nl\n \nc\na\nl\nl\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n,\n \nt\nh\na\nt\n \na\nl\nl\no\nw\n \nu\ns\ne\nr\ns\n \nt\no\n \nl\no\ng\ni\nn\n \nt\no\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nj\no\ni\nn\ne\nd\n \nP\nC\n \nu\ns\ni\nn\ng\n \no\nn\nl\ny\n \nt\nh\ne\ni\nr\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ng\ne\nn\ne\nr\na\nl\n \na\nr\nc\nh\ni\nt\ne\nc\nt\nu\nr\ne\n \ni\nn\nv\no\nl\nv\ne\ns\n \nt\nh\nr\ne\ne\n \np\na\nr\nt\ni\ne\ns\n:\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ns\np\ne\nc\ni\nf\ni\nc\n \na\np\np\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n,\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \no\nn\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \np\nr\no\nd\nu\nc\nt\n \ni\ns\n \ni\nn\ns\nt\na\nl\nl\ne\nd\n \na\nn\nd\n \na\nn\n \no\nn\n-\np\nr\ne\nm\n \no\nr\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nf\na\nc\ni\nl\ni\nt\na\nt\ne\ns\n \nt\nh\ne\n \nc\no\nm\nm\nu\nn\ni\nc\na\nt\ni\no\nn\n \nb\ne\nt\nw\ne\ne\nn\n \nt\nh\ne\n \ns\nm\na\nr\nt\np\nh\no\nn\ne\n \na\nn\nd\n \nt\nh\ne\n \nP\nC\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nw\ni\nt\nh\n \no\nn\ne\n \no\nf\n \nt\nh\ne\ns\ne\n \np\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ni\ns\n \ni\ns\n \na\nl\ns\no\n \nt\nh\ne\n \nc\na\ns\ne\n,\n \na\nn\nd\n \nt\nh\ne\n \nd\ne\ns\nc\nr\ni\nb\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nd\no\n \nn\no\nt\n \nm\no\nd\ni\nf\ny\n \nh\no\nw\n \na\nu\nt\nh\ne\nn\nt\ni\nc\na\nt\ni\no\nn\n \ni\ns\n \nd\no\nn\ne\n \ni\nn\n \nt\nh\ne\n \nA\nc\nt\ni\nv\ne\n \nD\ni\nr\ne\nc\nt\no\nr\ny\n \ne\nn\nv\ni\nr\no\nn\nm\ne\nn\nt\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ni\nm\np\nl\ne\nm\ne\nn\nt\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \na\n \nc\nu\ns\nt\no\nm\n \nW\ni\nn\nd\no\nw\ns\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \na\n \ns\ne\nr\nv\ni\nc\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \na\nf\nt\ne\nr\n \na\nc\nc\ne\np\nt\ni\nn\ng\n \nt\nh\ne\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n,\n \ni\nf\n \ni\nt\n’\ns\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \nh\na\ns\n \nt\no\n \ne\nn\nt\ne\nr\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \na\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\n \nt\nh\ne\n \nf\ni\nr\ns\nt\n \nt\ni\nm\ne\n \nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nS\na\nf\ne\nN\ne\nt\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \np\na\ns\ns\nw\no\nr\nd\n \na\nn\nd\n \nw\nr\ni\nt\ne\ns\n \ni\nt\n \nt\no\n \na\n \nf\ni\nl\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nf\ni\nl\ne\n \ni\ns\n \nr\ne\na\nd\na\nb\nl\ne\n \nf\no\nr\n \na\nl\nl\n \nu\ns\ne\nr\ns\n \nI\n \ni\nn\nv\ne\ns\nt\ni\ng\na\nt\ne\nd\n \nh\no\nw\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\ne\nr\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n,\n \na\ns\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nr\ne\n,\n \nc\no\nu\nl\nd\n \na\nl\nl\no\nw\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \ne\nn\nt\nr\no\np\ny\n \nv\na\nl\nu\ne\n \nu\ns\ne\nd\n \ni\nn\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n \na\nn\nd\n \nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\ns\ne\n \nt\no\ng\ne\nt\nh\ne\nr\n \nr\ne\ns\nu\nl\nt\n \ni\nn\n \na\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n(\np\nu\nb\nl\ni\ns\nh\ne\nd\n \na\ns\n \nC\nV\nE\n-\n2\n0\n2\n1\n-\n4\n2\n1\n3\n8\n)\n,\n \nw\nh\ni\nc\nh\n \na\nl\nl\no\nw\ns\n \na\nn\ny\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nm\na\nc\nh\ni\nn\ne\n \nt\no\n \nd\ne\nc\nr\ny\np\nt\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ns\nt\no\nr\ne\nd\n \ni\nn\n \nt\nh\ne\n \nf\ni\nl\ne\n,\n \ni\nn\nc\nl\nu\nd\ni\nn\ng\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nS\ni\nn\nc\ne\n \nt\nh\ne\n \nC\nr\ne\nd\ne\nn\nt\ni\na\nl\n \nP\nr\no\nv\ni\nd\ne\nr\n \nD\nL\nL\n \ni\ns\n \nl\no\na\nd\ne\nd\n \ni\nn\nt\no\n \nt\nh\ne\n \nl\no\ng\no\nn\n \nw\ni\nn\nd\no\nw\n \np\nr\no\nc\ne\ns\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ni\no\nn\n/\nd\ne\nc\nr\ny\np\nt\ni\no\nn\n \no\nf\n \nt\nh\ne\n \np\na\ns\ns\nw\no\nr\nd\ns\n \ni\ns\n \nd\no\nn\ne\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \nt\nh\na\nt\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nP\na\ns\ns\nw\no\nr\nd\nl\ne\ns\ns\n \nl\no\ng\ni\nn\n \nf\no\nr\n \n“\nr\nu\nn\n \na\ns\n \nd\ni\nf\nf\ne\nr\ne\nn\nt\n \nu\ns\ne\nr\n”\n \nw\no\nu\nl\nd\n \nn\no\nt\n \nw\no\nr\nk\n \ni\nf\n \nt\nh\ne\n \nf\ni\nl\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \np\na\ns\ns\nw\no\nr\nd\ns\n \nw\na\ns\n \no\nn\nl\ny\n \nr\ne\na\nd\na\nb\nl\ne\n \nb\ny\n \nt\nh\ne\n \nS\nY\nS\nT\nE\nM\n \nu\ns\ne\nr\n,\n \ns\ni\nn\nc\ne\n \no\nn\n \nt\nh\ni\ns\n \nl\no\ng\ni\nn\n,\n \nt\nh\ne\n \nD\nL\nL\n \nw\ni\nl\nl\n \nb\ne\n \nr\nu\nn\nn\ni\nn\ng\n \nw\ni\nt\nh\n \nt\nh\ne\n \np\ne\nr\nm\ni\ns\ns\ni\no\nn\ns\n \no\nf\n \na\n \nn\no\nr\nm\na\nl\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\nh\ne\nn\n \nt\nh\ne\n \nu\ns\ne\nr\n \nl\no\ng\ns\n \ni\nn\nt\no\n \na\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \nu\ns\ne\nr\n \ne\nn\nt\ne\nr\ns\n \nt\nh\ne\n \nu\ns\ne\nr\nn\na\nm\ne\n,\n \ng\ne\nt\ns\n \na\n \nl\no\ng\ni\nn\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n \no\nn\n \nt\nh\ne\n \na\np\np\n \na\nn\nd\n \ni\ns\n \nl\no\ng\ng\ne\nd\n \ni\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \ns\ne\nr\nv\ni\nc\ne\n,\n \nw\nh\ni\nc\nh\n \ni\nn\n \nt\nu\nr\nn\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\n \np\nr\no\nv\ni\nd\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nf\n \nV\ne\nr\ni\nd\ni\nu\nm\nA\nD\n \nV\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \n \n \n.\n.\n.\n \n \n \n \nH\no\nw\ne\nv\ne\nr\n,\n \nt\nh\ni\ns\n \nC\nS\nR\n \nH\nT\nT\nP\n \nr\ne\nq\nu\ne\ns\nt\n \nc\na\nn\n \nb\ne\n \nm\na\nd\ne\n \nb\ny\n \na\nn\ny\n \nd\no\nm\na\ni\nn\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nv\nu\nl\nn\ne\nr\na\nb\ni\nl\ni\nt\ny\n \nt\nh\ne\nn\n \na\nl\nl\no\nw\ns\n \nf\no\nr\n \na\nn\ny\n \nu\ns\ne\nr\n \nt\no\n \np\no\nt\ne\nn\nt\ni\na\nl\nl\ny\n \no\nb\nt\na\ni\nn\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \na\nl\nl\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\n’\ns\n \ni\nf\n \nt\nh\ne\ny\n \nf\na\nl\nl\n \nf\no\nr\n \nt\nh\ne\n \nm\na\nl\ni\nc\ni\no\nu\ns\n \np\nu\ns\nh\n \nn\no\nt\ni\nf\ni\nc\na\nt\ni\no\nn\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nu\ns\ne\nr\n \ng\ne\nt\ns\n \na\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nh\ni\ns\n \nH\nY\nP\nR\n \na\np\np\n \nt\no\n \nl\no\ng\n \ni\nn\n \na\ns\n \nt\nh\ne\n \nc\nu\nr\nr\ne\nn\nt\n \nu\ns\ne\nr\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \nc\no\nn\nt\ni\nn\nu\no\nu\ns\nl\ny\n \np\no\nl\nl\ns\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \na\nn\nd\n \ni\nf\n \nt\nh\ne\n \nu\ns\ne\nr\n \na\nu\nt\nh\no\nr\ni\nz\ne\ns\n \na\n \nl\no\ng\ni\nn\n \ni\nn\n \nt\nh\ne\n \na\np\np\n,\n \nt\nh\ne\n \na\np\np\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\nn\n \nf\no\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nt\no\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \na\ns\n \np\na\nr\nt\n \no\nf\n \na\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n,\n.\n \n \n \n.\n.\n.\n \n \n \n \nO\nn\n \nt\nh\ne\n \nc\nl\ni\ne\nn\nt\n \nt\nh\ne\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nd\ne\nc\nr\ny\np\nt\ne\nd\n \nb\ny\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \na\nn\nd\n \np\na\ns\ns\ne\nd\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nY\nP\nR\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \nc\na\nn\n \nb\ne\n \nl\ne\nv\ne\nr\na\ng\ne\nd\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\nt\nt\na\nc\nk\n \ns\nc\ne\nn\na\nr\ni\no\n \ni\ns\n \nt\nh\na\nt\n \na\nn\n \na\nt\nt\na\nc\nk\ne\nr\n \nh\na\ns\n \nc\no\nd\ne\n \ne\nx\ne\nc\nu\nt\ni\no\nn\n \na\ns\n \na\n \nl\no\nw\n \np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \na\nn\nd\n \ni\ns\n \nl\no\no\nk\ni\nn\ng\n \nt\no\n \nl\no\ng\ni\nn\n \na\ns\n \na\nn\no\nt\nh\ne\nr\n \nu\ns\ne\nr\n \n(\nr\ne\nf\ne\nr\nr\ne\nd\n \nt\no\n \na\ns\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n)\n,\n \nw\nh\no\n \nu\ns\ne\ns\n \nH\nY\nP\nR\n \nt\no\n \nl\no\ng\n \ni\nn\n \nt\no\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nI\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nc\nl\ni\nc\nk\ns\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nb\nu\nt\nt\no\nn\n \ni\nn\n \nt\nh\ne\ni\nr\n \nH\nY\nP\nR\n \na\np\np\n \nf\no\nr\n \nt\nh\na\nt\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \no\nb\nt\na\ni\nn\ns\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nh\ni\ns\n \no\nw\nn\n \nH\nY\nP\nR\n \na\np\np\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ne\nn\nr\no\nl\nl\ne\nd\n \nf\no\nr\n \nt\nh\ne\n \nl\no\nw\n-\np\nr\ni\nv\ni\nl\ne\ng\ne\nd\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n,\n \nm\no\nd\ni\nf\ni\ne\ns\n \nt\nh\ne\n \np\na\nr\na\nm\ne\nt\ne\nr\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \nc\nl\no\nu\nd\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n2\n \nt\no\n \ns\nt\na\nr\nt\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \nf\no\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \na\nn\nd\n \nt\nh\ne\nn\n \ns\ne\nn\nd\ns\n \nt\nh\ne\n \ns\nt\no\nl\ne\nn\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \no\nf\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \ni\nn\n \ns\nt\ne\np\n \n3\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \ni\ns\n \ns\ne\nn\nt\n \nt\no\n \nt\nh\ne\n \na\np\np\n \na\nf\nt\ne\nr\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nf\nl\no\nw\n \ni\ns\n \ns\nt\na\nr\nt\ne\nd\n \na\nn\nd\n \na\nl\ns\no\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \ni\nn\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \na\np\np\n \nt\na\nk\ne\ns\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n \np\nr\ne\np\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n,\n \ne\nn\nc\nr\ny\np\nt\ns\n \nt\nh\na\nt\n \nd\na\nt\na\n \na\nn\nd\n \ns\ne\nn\nd\ns\n \ni\nt\n \nt\no\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \nH\nT\nT\nP\n \nr\ne\ns\np\no\nn\ns\ne\n \ns\ne\nn\nt\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n \nt\no\n \nt\nh\ne\n \na\np\np\n,\n \ns\ne\nt\nt\ni\nn\ng\n \nt\nh\ne\n \nE\nn\nc\nC\no\nu\nn\nt\ne\nr\n \nv\na\nl\nu\ne\n,\n \nw\nh\ni\nc\nh\n \nt\nh\ne\n \na\np\np\n \nw\ni\nl\nl\n \nu\ns\ne\n \nt\no\n \ne\nn\nc\nr\ny\np\nt\n \nt\nh\ne\n \nu\ns\ne\nr\n’\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nc\no\nn\nt\na\ni\nn\ni\nn\ng\n \nt\nh\ne\n \ne\nn\nc\nr\ny\np\nt\ne\nd\n \nl\no\ng\ni\nn\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \na\nn\nd\n \nt\nh\ne\n \ne\nn\nc\nC\no\nu\nn\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nW\ni\nt\nh\n \nt\nh\ne\n \nv\na\nl\nu\ne\ns\n \ni\nn\n \nt\nh\ne\n \nr\ne\ng\ni\ns\nt\nr\ny\n \ni\nt\n \ni\ns\n \np\no\ns\ns\ni\nb\nl\ne\n \nt\no\n \nd\ne\nr\ne\ng\ni\ns\nt\ne\nr\n \nt\nh\ne\n \nt\na\nr\ng\ne\nt\n \nu\ns\ne\nr\n \nf\nr\no\nm\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nA\nf\nt\ne\nr\nw\na\nr\nd\ns\n \nt\nh\ne\n \na\nt\nt\na\nc\nk\ne\nr\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \nc\no\nm\np\nu\nt\ne\nr\n \n(\ni\nn\n \nt\nh\ni\ns\n \nc\na\ns\ne\n \na\n \nU\nA\nC\n \nl\no\ng\ni\nn\n \np\nr\no\nm\np\nt\n)\n \na\nn\nd\n \ns\nt\na\nr\nt\ns\n \na\n \nl\no\ng\ni\nn\n \np\nr\no\nc\ne\ns\ns\n \no\nn\n \nt\nh\ne\n \na\np\np\n.\n \n \n \n.\n.\n.\n \n \n \n \nT\nh\ni\ns\n \nc\ne\nr\nt\ni\nf\ni\nc\na\nt\ne\n \ni\ns\n \nn\no\nw\n \ns\ne\nn\nt\n \na\ns\n \nt\nh\ne\n \np\no\nl\nl\ni\nn\ng\n \nr\ne\ns\np\no\nn\ns\ne\n \nt\no\n \nt\nh\ne\n \nH\nY\nP\nR\n \ns\ne\nr\nv\ni\nc\ne\n \nb\ny\n \nt\nh\ne\n \ns\ne\nr\nv\ne\nr\n.\n \n \n \n.\n.\n.\n \n \n \n \nF\no\nr\n \na\nl\nl\n \nt\ne\ns\nt\ne\nd\n \np\nr\no\nd\nu\nc\nt\ns\n \nt\nh\ne\nr\ne\n \ni\ns\n \na\n \nn\ne\nw\n \nw\na\ny\n \nt\no\n \no\nb\nt\na\ni\nn\n \nl\no\ng\ni\nn\n \nc\nr\ne\nd\ne\nn\nt\ni\na\nl\ns\n \no\nf\n \no\nt\nh\ne\nr\n \nu\ns\ne\nr\ns\n \na\ns\n \na\n \nl\no\nc\na\nl\n \nA\nd\nm\ni\nn\ni\ns\nt\nr\na\nt\no\nr\n.\n \n \n \n.\n.\n.\n \n \n "
    ],
    "html_url": "https://blog.compass-security.com/2022/06/no-passwords-more-problems/",
    "text": "Passwordless products promise greater security and convenience by allowing users to log in to Windows systems with only their smartphone. But what is going on behind the scenes and how could a domain’s security stance be worsened by such a solution? In this post I will explain how these products are implemented and detail the vulnerabilities and weaknesses discovered in three tested products.\n\nWindows Hello\n\nThis blogpost is not about Windows Hello. It is about a specific class of products, which I will call passwordless products, that allow users to login to any domain joined PC using only their smartphone. Think of it as the modern iteration of the smartcard login, but instead of a smartcard the user uses his smartphone. Additionally all the products in this blogpost are third party products, as far as I know there is no such product by Microsoft itself.\n\nGeneral Architecture/Implementation\n\nThe general architecture involves three parties: the smartphone on which the product specific app is installed, the computer on which the product is installed and an on-prem or cloud server, which facilitates the communication between the smartphone and the PC.\n\nThe general architecture with the involved parties.\n\nWhen a user authenticates on his computer, the user also authenticates to the domain controller, to access network resources in the Active Directory environment. When a user logs in with one of these passwordless products this is also the case, and the described products do not modify how authentication is done in the Active Directory environment.\n\nThe implementation on the computer is done with a custom Windows credential provider and a service. Windows credential providers are DLLs loaded by the login process, which have the purpose to gather user credentials and pass them to the login process. (Microsoft Documentation) The paswordless products install their own credential provider to hook themselves into any started login process. The service handles communication to the server and communicates via IPC to the credential provider.\n\nThe implementation on the computer, Credential Provider2 has been installed by the pwless product.\n\nThe most important takeaway of the client implementation is that the credential provider needs to pass valid credentials to the logon process, which are then validated later on in the login process. The credential provider itself does not have the power to validate credentials. Since the user is not entering his credentials, valid credentials need to be cached somewhere and on successful authorization by the user (on the app) are then passed to the credential provider.\n\nThis is the main functionality these products implement, which is caching user credentials and passing them to the credential provider, once the user has authorized the login on their smartphone.\n\nIn the rest of this blog, three products are detailed and a vulnerability for each product is presented. The vulnerabilities allow non-privileged users to abuse these cached credentials to log in as another user.\n\nThales SafeNet CVE-2021-42138\nUser Experience\n\nThe user installs the SafeNet mobile app and enrolls the app for his user by scanning a QR code provided by the company.\n\nWhen a user logs into a computer, the user enters the username, gets a login notification on the app and after accepting the notification, if it’s the first time the user logs into that computer, the user has to enter the password.\n\nOn subsequent logins to the same computer the user will only need to enter the username and accept the login notification on the smartphone to log in.\n\nHow it works\n\nSafeNet caches the login credentials on the computer. When a user logs in the first time to a computer, the SafeNet credential provider encrypts the user’s password and writes it to a file. The next time the user logs in, the credential provider reads that file and decrypts the user’s password.\n\nThe file storing the encrypted passwords of the users who enrolled for passwordless login on the machine.\nVulnerability\n\nSince the file is readable for all users I investigated how the passwords were encrypted, as a vulnerability there, could allow any user to decrypt the passwords of other users.\n\nUsing dynamic analysis it can be seen that DPAPI is used to decrypt the credentials.\n\nUsing API Monitor to monitor the credential provider DLL during a login process. Marked in red is the DPAPI call to decrypt the passwords. Censored in black is the observed plaintext password.\n\nChecking how the passwords are encrypted, shows that the DPAPI encryption is done with the LocalMachine flag:\n\nThe only reference to CryptProtectData in the credential provider dll (in ghidra).\n\nA quick glimpse at the documentation shows that with this flag, any user on the computer can decrypt the data.\n\nAdditionally, the decryption uses the entropy parameter. In DPAPI the entropy acts as a sort of password, meaning a blob can only be decrypted if the same entropy value as used in the encryption, is used for decryption. However, it turns out the value is static and hardcoded into the binary.\n\nThe entropy value used in the encryption and decryption of the passwords.\n\nSo here is what we have: a file with encrypted user passwords readable by all users, DPAPI encryption with the LocalMachine scope and static entropy. These together result in a vulnerability (published as CVE-2021-42138), which allows any user on the machine to decrypt the passwords stored in the file, including the password of other users.\n\nThe following tiny PowerShell script can decrypt the passwords stored in the file on any PC with the vulnerable SafeNet version installed.\n\nDecrypting the user passwords, using a few lines of powershell.\n\nThales deployed mitigations against this vulnerability. However in a follow-up test, it turned out that it was still vulnerable. The only thing that changed was another 2 layers of encryption. A new DLL manages the new encryption of the user’s passwords. To exploit the new vulnerability, it is possible to import the DLL and call one of the exported functions, appropriately named getADCachedCreds.\n\nSo why not just change the access permissions on the file with the encrypted passwords, surely this would be the most intuitive way of fixing this vulnerabilty? The reason why the file needs to be readable, and the password being decryptable by normal users is the fact that Thales SafeNet supports passwordless login for the “Run as different user” Windows functionality. The login process for “run as different user” runs as the current user. As opposed to when normally logging in on the lock screen or clicking run as Admin, where the login process runs as the SYSTEM user.\n\nStarting explorer.exe as the local root user using the “run as different user” functionality. Explorer.exe running with normal user permissions starts the login process.\n\nSince the Credential Provider DLL is loaded into the logon window process the encryption/decryption of the passwords is done with the permissions of that process. Passwordless login for “run as different user” would not work if the file containing the encrypted passwords was only readable by the SYSTEM user, since on this login, the DLL will be running with the permissions of a normal user.\n\nIn the newest version of SafeNet, a registry key is present, which if set to 1 ensures that DPAPI encryption will be done without the LocalMachine flag. As far as I know however, this registry key is not set to 1 by default…\n\nVeridiumAD CVE-2021-42791\nUser Experience\n\nThe user installs the VeridiumAD mobile app and enrolls the app by scanning a QR code provided by the company.\n\nWhen the user logs into a computer, the user enters the username, gets a login notification on the app and is logged in. Unlike SafeNet and HYPR, the user never has to enter his password even the first time logging into a computer.\n\nHow it works\n\nVeridiumAD uses an on-prem server, which interacts with the AD CS service to obtain a user login certificate. This login certificate is sent to the computer after the user has authorized a login. The login process is shown in the image below. After the user clicks log in with VeridumAD and enters the username, the service makes an HTTP request to the server. After the server receives the HTTP request, the push notification is triggered for that user.\n\nThe service also starts polling the server, waiting for the user to either approve or decline. Once the user approves, the login certificate of the user is returned on one of the polling requests. This login certificate is passed to the VeridiumAD service, which in turn sends it to the VeridiumAD credential provider and then to the login process.\n\nThe login process of VeridiumAD\nVulnerability\n\nThe HTTP request, which triggers the login notification, can be made by anyone in the internal network with access to the VeridiumAD server API. When sending the request, an arbitrary user-SID and a custom notification text can be specified. This will trigger the login notification for that arbitrary user. Additionally, the server can also be polled and if the victim user accepts the malicious push request, the polling user obtains this victim’s login certificate.\n\nThe HTTP request and response, triggering the login notification. It is possible to specify arbitrary user SIDs and some text of the push notification.\nThe triggered push notification.\nThe polling HTTP request and the response, containing the user’s login certificate.\n\nThere is a small complication however, in that a SSL client certificate is required to actually communicate with the server’s API.\n\nWhen the VeridiumAD service is restarted, the service sends a certificate signing request to the server and in the response receives the SSL client certificate.\n\nThe HTTP request made by the service, which sends a CSR to the server. The response contains the SSL client certificate.\n\nThe endpoint is protected with NTLM authentication. However, this CSR HTTP request can be made by any domain user.\n\nThis vulnerability then allows for any user to potentially obtain the login certificate of all other user’s if they fall for the malicious push notification. The requirements for mounting the attack are access to the VeridiumAD API and credentials of any valid domain user.\n\nVeridiumId mitigated the vulnerability by making it such that only computer accounts in a specific group may make the CSR HTTP request.\n\nHYPR (CVE to be assigned)\nUser Experience\n\nThe user installs the HYPR app. To enroll the HYPR app for passwordless log in to a computer, the user logs in normally (with password) to a computer, then opens the HYPR desktop app and scans a QR code displayed by the desktop application. Afterwards the user gets a button in his HYPR app to log in as the current user for that computer. A user may have multiple user/computer login buttons in his app.\n\nTo log in the user simply clicks the desired user/computer login button and will be logged in and therefore the user does not even need to touch the keyboard.\n\nHow it works\n\nHYPR caches the user’s login certificate on the user’s phone. The HYPR service on the computer continuously polls the cloud server and if the user authorizes a login in the app, the app sends the encrypted login certificate to the cloud server, which then forwards the certificate to the client as part of a polling response,. On the client the certificate is decrypted by the HYPR service and passed to the login process.\n\nThe HYPR login process.\n\nThe login certificate is encrypted with a key derived with Diffie-Hellman between the computer and the smartphone. The certificate can only be decrypted as SYSTEM on the computer or with full control of the smartphone.\n\nVulnerability\n\nIt is possible to obtain encrypted login certificates of other users. This stolen encrypted login certificate can be leveraged to login as another user. The attack scenario is that an attacker has code execution as a low privileged user and is looking to login as another user (referred to as the target user), who uses HYPR to log in to that computer.\n\nObtaining Encrypted Login Certificates of other users\n\nHYPR stores information of the users enrolled for passwordless login on the computer in the registry. Each user has a key, containing his devices (smartphones) and values needed to communicate to the cloud server. The keys are readable for any user on the computer.\n\nReading out the values associated with a user’s enrolled phone.\n\nThe values are stored DPAPI encrypted without entropy and the LocalMachine flag set. Meaning these values are readable by any user on the machine and a local attacker can read out the values of other users.\n\nWith these values it is possible to poll the cloud server. If the target user clicks the login button in their HYPR app for that computer, the attacker obtains the encrypted login certificate of the target user.\n\nThe polling HTTP request (containing the parameters read out from the registry) and the response containing the encrypted login certificate.\nExploit\n\nTo exploit the vulnerability. the attacker starts a login process on his own HYPR app, which the attacker enrolled for the low-privileged user on the computer, modifies the parameters sent to the HYPR cloud server in step 2 to start a login process for the target user on the computer and then sends the stolen encrypted login certificate of the target user to the server in step 3.\n\nThe used attack setup. The attacker has installed the HYPR app on his smarthpone and a HTTPS proxy intercepts and modifies the requests sent by the app.\n\nThere is however a complication. When initiating a login, the HYPR cloud server sets the encCounter value. This encCounter value is sent to the app after the login flow is started and also to the HYPR service in the polling response containing the encrypted login certificate.\n\nThe app takes the encCounter value prepends it to the login certificate, encrypts that data and sends it to the server. The HYPR service takes the encCounter value and compares it to the value in the obtained plaintext. If the encCounter in the plaintext does not match the encCounter received in the HTTP response, the HYPR service aborts the login.\n\nThe HTTP response sent by the server to the app, setting the EncCounter value, which the app will use to encrypt the user’s certificate.\nThe polling response containing the encrypted login certificate and the encCounter.\n\nThis complicates the attack, since after stealing the encrypted login certificate, the attacker now needs to make sure that the static encCounter of the stolen encrypted login certificate matches the encCounter set by the server. However, the attacker cannot influence the value set by the server.\n\nFortunately for the attacker, the encCounter value is predictable. It starts at 1 and is incremented by one for each login. Additionally the encCounter is reset back to 1 when a user is deregistered from the computer. When a user deregisters from a computer and reregisters, the shared encryption key between smartphone and computer however stays the same, since the DH private/public keys are static for a smartphone/computer.\n\nWith the values in the registry it is possible to deregister the target user from the computer.\n\nThe HTTP request to deregister a user from the computer, using the values from the registry.\n\nSo to prepare the actual attack, the attacker first obtains an encrypted login certificate of the target user, then deregisters the target user and waits for the target user to re-register. Afterwards the attacker starts a login process on the computer (in this case a UAC login prompt) and starts a login process on the app. On the first HTTP request sent by the app, the attacker replaces the username and device id (identifying the smartphone) with the target user’s username/device id.\n\nMarked in blue are the values, replaced by the attacker to initiate a login flow for another user.\n\nAfterwards a biometric/pin prompt needs to be done by the attacker on the app and then a session id is sent back. This session id is used to obtain the encCounter value and prepare the server to receive the encrypted login certificate.\n\nHTTP request sending the sessionid and the response, which contains the encCounter and the username for whom the login process has been initiated. As can be seen the server has been fooled into believing that the login process is for the user [CUT]3593, the value injected by the attacker.\n\nIf the EncCounter matches the one of the encrypted login certificate of the target user, the attacker continues to the next step, otherwise the previous steps are repeated.\n\nThe attacker nows sends the stolen encrypted login certificate to the server:\n\nMarked in blue is the login certificate inserted by the attacker.\n\nThis certificate is now sent as the polling response to the HYPR service by the server. The service decrypts the certificate and passes it to the login process. Now the attacker is logged in as the target user.\n\nAnother vulnerability which allows a user to log in as another user. There are however a number of countermeasures which can be taken to foil this attack. Making the encCounter a random value and making sure the value does not repeat, will making reusing encrypted login certificates impossible. Ensuring that only the correct user has access to the values stored in the registry would prevent being able to deregister or poll the server on behalf of another user. And lastly it should not be possible to start login flows on the app for other users. The first and second issue are fixed in newer HYPR releases.\n\nConclusion\n\nIt should be clear that these passwordless solutions in no way eliminate passwords from the network. Instead credentials are cached somewhere and a complex infrastructure is set up to pass the credentials to the login process upon user authorization. Vulnerabilities will expose these cached login credentials to be abused by attackers with a foothold in the network or on a computer.\n\nFor all tested products there is a new way to obtain login credentials of other users as a local Administrator. This is of course anyway possible on Windows. However with such a product installed, obtaining the credentials cached by the passwordless product does not require dumping memory or cracking a hash. Instead simply mimicking the credential provider/service will suffice. This will make such an attack hard to detect/prevent.\n\nI hope this blogpost was able to shed some light on how these products work. I want to finish by saying that I have only tested the three products above, there are other products whose implementation may hugely differ. All three companies were very cooperative and were quick to fix the vulnerabilities, that were responsibly disclosed to them. The vulnerabilities, as presented above should not be present anymore in the newer versions of these products.",
    "title": "No Passwords More Problems"
}
