{
    "brief": "If a laptop is lost or stolen, an attacker who gains physical possession of the machine cannot access the data or tamper with the system, even when removing the disk and accessing it from another system.<br> \nBitLocker Configuration<br> \nIn the TPM-only mode, the Volume Master Key (VMK) is released during boot and sent to the CPU.<br> \nThis gives an attacker the opportunity to sniff the data channel and intercept the VMK.<br> \nTPM: In the TPM-only mode, the user is not required to provide a protector to unlock the TPM.<br> \nDuring boot, the boot environment is measured, meaning that the firmware and software that is loaded is tracked and the measurement values are stored in the Platform Configuration Registers (PCR).<br> \nTPM and PIN: The VMK is only released to the CPU after the user has provided the correct PIN.<br> \nTPM and Startup Key: The VMK is only released to the CPU after the user has provided the correct startup key.<br> \nAttack<br> \nThe goal of the attack is to sniff the communication between the TPM chip and the CPU.<br> \nAfterwards, the BitLocker recovery key can be obtained with the Sigrok BitLocker Key Extractor tool:<br> \nThis section discusses various mitigation strategies as well as operational considerations that require attention in practice.<br> \nRecall from a previous section that the attack exploits the fact that in TPM-only mode the VMK is automatically released and sent to the CPU during boot, allowing the attacker to recover it by sniffing the bus communication.<br> \nIf tamper protection is detected, the system will either prompt the user for the BIOS password or the BitLocker recovery key during the next boot cycle.<br> \nNaturally, it cannot be guaranteed that the PIN can be kept secret, and a motivated attacker might very well be able to learn it through several means.<br> \nAn attacker in possession of the PIN can carry out the same attack as described in the previous section, with the only exception that they have to enter the PIN during boot to release the VMK.<br> \nDepending on the environment or the type of adversary, the most secure BitLocker configuration might not offer adequate protection.<br> ",
    "html_url": "https://blog.compass-security.com/2024/02/microsoft-bitlocker-bypasses-are-practical/",
    "text": "My colleague Mirko and I recently attended the “Defeating Microsoft’s Default BitLocker Implementation” security training by Hands-On Security. The training was excellent and got us really excited about the topic. In just two days, Pascal Gujer and Joel Frei taught the group the skills and knowledge needed to bypass a default BitLocker configuration on a T470 ThinkPad. Importantly, these methods can be used on most modern business machines, not just this particular model.\n\nThe attack has also gained significant attention in the security community this year, with many blog articles being published and Youtube videos where BitLocker is bypassed in under a minute being released.\n\nIn this blog article, we would like to share key insights from the training and emphasize the potential risks and consequences associated with this attack technique. Our target audience includes businesses looking to safeguard sensitive data on their Windows devices, as well as individuals with an elevated requirement for protecting their data.\n\nBackground\n\nBitLocker is a disk encryption feature in Microsoft Windows operating systems that helps protect the confidentiality of the data on a computer by encrypting the hard drive. If a laptop is lost or stolen, an attacker who gains physical possession of the machine cannot access the data or tamper with the system, even when removing the disk and accessing it from another system. This prevents unauthorized data access as well as Evil Maid attacks where an attacker with (temporary) access to a device attempts to install a backdoor into the system.\n\nOn most modern business laptops (Lenovo ThinkPad, HP Elite Book, Microsoft Surface), the cryptographic key material to decrypt the disk during boot is stored in a Trusted Platform Module (TPM). A TPM is a hardware-based security chip that provides a secure tamper-resistant environment for storing key material and performing cryptographic operations.\n\nBitLocker Configuration\n\nBitLocker can be run in different modes:\n\nTPM-only: The operating system boots normally to the logon screen without any user interaction.\nPIN Protector: The user must provide a PIN during boot.\nStartup Key Protector: The user must provide a startup key (typically stored on a USB thumb drive) during boot.\n\nFor maximum security, the PIN and startup key protectors can be combined, such that the user must provide a PIN (knowledge factor) and a key file (possession factor) during boot. In our experience, virtually all customers have TPM-only mode configured on their Windows devices. On Windows 11 where BitLocker is enabled by default, TPM-only mode is used unless configured otherwise.\n\nBitLocker Architecture\n\nTo understand the attack and mitigations, it is important to have a solid understanding of some BitLocker implementation details.\n\nIn the TPM-only mode, the Volume Master Key (VMK) is released during boot and sent to the CPU. The CPU then fetches the encrypted Full Volume Encryption Key from the BitLocker partition metadata and decrypts it with the VMK to obtain the plaintext Full Volume Encryption Key. This is visualized in the image below:\n\n(Source: Microsoft documentation)\n\nIn other words, with access to the VMK and the encrypted BitLocker partition, the disk can be decrypted. It is worth emphasizing that the plaintext VMK is sent to the CPU over physical wires. This gives an attacker the opportunity to sniff the data channel and intercept the VMK. Given the VMK, the attacker can obtain the Full Volume Encryption Key and access the disk. Alternatively, since the recovery passphrase is stored encrypted under the VMK in the disk metadata, the recovery passphrase can be obtained once the VMK is known.\n\nWhile the image above only covers the TPM-only mode scenario, the following image shows the mechanism for other key protectors:\n\n(Source: Microsoft documentation)\n\nThe most common boot scenarios are briefly described below:\n\nTPM: In the TPM-only mode, the user is not required to provide a protector to unlock the TPM. During boot, the boot environment is measured, meaning that the firmware and software that is loaded is tracked and the measurement values are stored in the Platform Configuration Registers (PCR). The TPM only releases the key if the PCR values contain expected values. This guarantees that the key is only released if the authentic Windows operating system is booted. In particular, this prevents an attacker from booting another operating system and then mounting the disk, as the PCR registers would contain invalid values.\nTPM and PIN: The VMK is only released to the CPU after the user has provided the correct PIN. (The PCR values are checked as well, just as in the TPM-only mode.)\nTPM and Startup Key: The VMK is only released to the CPU after the user has provided the correct startup key. (The PCR values are checked as well, just as in the TPM-only mode.)\nAttack\n\nThis section outlines the steps involved in carrying out the attack. The goal is not focus on nitty gritty details, but rather demonstrate the feasibility of the attack. No esoteric techniques or expensive hardware that can only be found in an advanced lab is required. In fact, all these steps were carried out with equipment that costs less than 1000 CHF. The attack is thus very affordable. Depending on the target device, attacks with much cheaper hardware have been demonstrated.\n\nTPM Bus Sniffing\n\nThe goal of the attack is to sniff the communication between the TPM chip and the CPU. Business laptops usually feature a discrete TPM, i.e., a dedicated physical tamper resistant chip on the motherboard. There are other TPM types (integrated, firmware, software, virtual), for which the attack does not work.\n\nOn the ThinkPad T470, the TPM can be accessed by removing the back cover, which can be achieved by removing a few screws and prying open the back:\n\nThis process takes less than a minute or even mere seconds with some practice. The following picture shows the chip in more detail:\n\nAfter locating the TPM chip, the attacker solders cables onto the relevant PINs. In the case of the T470, the Serial Peripheral Interface (SPI) communication protocol is used. Therefore, an attacker needs to connect five cables:\n\nMOSI\nMISO\nChannel Select (CS)\nClock (CLK)\nGround\n\nThe TPM pins themselves are very small, making it difficult to solder a cable. Instead, one usually looks for larger components on the mother board (e.g., resistors, capacitors, debug ports, larger connected chips) that are connected to the same bus used by the TPM to communicate with the CPU. On the motherboard of the T470, the TPM is connected to a relatively large SPI flash controller. By soldering onto the respective pins, the SPI communication channels can be sniffed. The following picture shows the SPI flash controller chip and the soldered wires:\n\nThese wires were then connected to a DreamSourceLab logic analyzer (DSLogic U3Pro16) to sniff the bus communication:\n\nDSView can be used to record and analyze the recorded SPI TPM traffic. There is even a built-in decoder to search for the VMK in the recorded trace:\n\nAfterwards, the BitLocker recovery key can be obtained with the Sigrok BitLocker Key Extractor tool:\n\n$ bitlocker-recovery-password-decryptor.py 341ae1961c7ed7932568d294d3ab886a832e509f9dd4ebf1f70e85261bd07171 bitlocker-disk.img \n\n###############################################################################\n#                                                                             #         \n#                       BitLocker Recovery Password Decryptor                 #\n#                                                                             #\n# by Pascal Gujer (@pascal_gujer)                                        v1.1 #\n###############################################################################\n\nExtracting BitLocker key material with dislocker-metadata...\nParsing output...\n\nNonce:                  9019ee4ee24bda0103000000\nMAC:                    30ca25ab9ef248ba376aa3b909f656e0\nEncrypted Recovery Password: c6f012bf3b25eaa5cbcdf0e805e29199ce6a17275796f033beeb1a08\n\nVMK:                    341ae1961c7ed7932568d294d3ab886a832e509f9dd4ebf1f70e85261bd07171\n\nDecrypting recovery password...\nThe decrypted recovery password is authentic:\n1c000000010000000010000002c0057df57f9340902243c8c98a6038 \n\n[+] Sucessfully retrieved the BitLocker Recovery Password in human readable format: \n\n            540694-352055-360327-181841-097328-563937-390819-158752\n\n\nAt this point, the attacker can access all data stored on the disk and/or install backdoors (Evil Maid attack).\n\nMitigation\n\nThis section discusses various mitigation strategies as well as operational considerations that require attention in practice.\n\nPIN / Startup Key\n\nRecall from a previous section that the attack exploits the fact that in TPM-only mode the VMK is automatically released and sent to the CPU during boot, allowing the attacker to recover it by sniffing the bus communication.\n\nThe most secure approach to prevent the TPM from automatically releasing the key is configuring a PIN protector (a knowledge factor) or a startup key (a possession factor). If either of the two are configured, the VMK is not released until the protector is provided. An attacker without knowledge / possession of the protector thus cannot sniff the VMK during the boot process.\n\nFor maximum security, both a PIN protector and a startup key protector should be required. We have seen this setup work very well in practice.\n\nTamper Protection\n\nBusiness laptops often implement a tamper protection mechanism that attempts to detect hardware tampering, for example:\n\nLenovo ThinkShield Built in Platform Security (aka Tamper Switch)\nHP Tamper Lock\n\nThese tamper protection mechanisms are usually implemented with a physical switch that opens or closes a circuit when the backplate is removed. If tamper protection is detected, the system will either prompt the user for the BIOS password or the BitLocker recovery key during the next boot cycle.\n\nTamper protection can be enabled / disabled in the BIOS settings. A sample configuration is provided in the following screenshot:\n\nFrom a security perspective, prompting the user for the BitLocker recovery key is arguably slightly more secure than prompting for the BIOS password.\n\nHowever, it should be noted that a careful attacker who is aware of tamper protection switches can rather easily bypass this protection mechanism by dremeling holes to access the PINs instead of removing the entire back cover. Depending on the switch type, it may also be possible to unsolder it. Tamper protection should therefore not be considered a primary defense mechanism against TPM sniffing attacks.\n\nOperational Considerations\n\nWhilst PIN and startup key protectors, or preferably a combination thereof, provide strong technical protection against TPM bus sniffing attacks, there are some important operational considerations. Without proper processes, the security guarantees provided by BitLocker might be significantly diminished or the whole protection rendered ineffective.\n\nRecovery\n\nWhen BitLocker is enabled on a laptop, there is a need for a recovery process because users can potentially lose access to the system due to various reasons. For example, they may lose / forget their BitLocker encryption key or password, experience hardware failures that prevent normal booting, or encounter issues with system updates or configuration changes. In such cases, the system can be recovered through a BitLocker recovery key.\n\nIt is crucial that there is a robust process that ensures the recovery key is only handed out over a secure channel, and that the employee is authenticated. If a simple phone call to the IT support team suffices to obtain the recovery key, even the strongest security configuration can be bypassed easily.\n\nPIN Management\n\nIn practice, we have encountered setups where the same (simple) PIN was configured on a fleet of thousands of machines. These PINs are shared among all employees and are never rotated. Naturally, it cannot be guaranteed that the PIN can be kept secret, and a motivated attacker might very well be able to learn it through several means. An attacker in possession of the PIN can carry out the same attack as described in the previous section, with the only exception that they have to enter the PIN during boot to release the VMK.\n\nIt is therefore recommended that each machine is configured with a unique BitLocker PIN that is chosen by the employee during the initial setup of their hardware.\n\nStartup Key Storage\n\nThe key file is usually stored on a USB thumb drive and is not protected with any user authentication mechanism, such as a fingerprint reader. If the attacker can get a hold of the laptop and the USB thumb drive, they can again carry out the attack outlined in the previous section. The only difference is that they have to plug in the drive to boot the machine.\n\nExpectation Management\n\nWhen evaluating defense mechanisms, it is crucial to not only focus on the benefits but also be aware of the limitations. Depending on the environment or the type of adversary, the most secure BitLocker configuration might not offer adequate protection. This is probably best illustrated with one of my all-time favorite XKCDs:\n\n(Source: https://xkcd.com/538/)",
    "title": "Microsoft BitLocker Bypasses are Practical"
}
{
    "brief": "In this exploration, we delve into these questions, using data collected from honeypots mimicking different ICS products in both Ukraine and Germany, to better understand the landscape of cyber intrusions in this specific field.<br> \nFundamentals of Industrial Control Systems<br> \nIndustrial Control Systems (ICS) are crucial for monitoring and managing complex industrial processes and systems.<br> \nIn the evolving landscape of those systems, there has been a emergence of devices that serve as a bridge between traditional ICS components, using industrial protocols, and more modern technologies featuring, e.g., Internet connection via cellular network, HMI displays integrated into web interfaces, and more.<br> \nOften, attackers compromise the business network of an industrial company without directly impacting the Industrial Control System (ICS) infrastructure.<br> \nAttackers used social engineering to access the business network, subsequently compromising the industrial control systems.<br> \nUnlike other ICS malware attacks, this one did not target specific product vulnerabilities.<br> \nFurthermore, the malware had the capability to erase systems and overwrite configuration files of industrial control systems [9].<br> \nAdditionally, it is likely that publicly accessible web-based SCADA software from Advantech/Broadwin were directly targeted as well [10].<br> \n2023: In November and December 2023, the Iranian-backed hacktivist group Cyber Avengers successfully compromised ICS devices at two water distribution facilities in the United States [14] and Ireland [15] by using the default password (CVE-2023-6448).<br> \nAdditionally, some advanced functionalities were emulated, such as a web-based Command Line Interface (CLI).<br> \nThis feature allows for operations like internal network enumeration with ping, including simulated responses from various internal IP addresses.<br> \nHTTP requests not classified as malicious:<br> \nHTTP requests classified as malicious:<br> \nOut of the total interactions, 46’930 were categorized as malicious, while 37’017 were identified as non-malicious requests.<br> \nThe systems located in Germany recorded a marginally higher number of malicious requests, totaling 24’842, compared to those in Ukraine, which registered 22’088 such requests.<br> \nIn this experiment, the source IP of each attack was determined using the MaxMind GeoLite2 Country database.<br> \nIt shows that the honeypots received malicious requests from around the world.<br> \n41% of the malicious requests originated from those three countries.<br> \nFigure 2: Malicious request by country<br> \nThe bar chart below categorizes the top 20 countries by the number of malicious requests they have made to honeypot systems in Germany and Ukraine.<br> \nThis is explained by the fact that all systems exposed online are subject to constant scanning, and automated exploit attempts are made against a wide range of products.<br> \nThe bulk of these requests originated from two IP addresses located in the UK, followed by a significant number from Germany.<br> \nDespite originating from various IP addresses in Russia, Poland, and Turkey, the attacks used similar credentials and identical HTTP request parameters like User-Agent, Accept and Accept-Language.<br> \nThe attacks were geographically dispersed, with 43 HTTP requests targeting the system in Germany and 41 in Ukraine.<br> \nFrom 24 out of total 29 IP addresses, malicious requests were sent to systems in both Germany and Ukraine:<br> \nAn example of the activities conducted by one of the attacker IP addresses:<br> \nUpon further examination, it was discovered that at least 20 water supply facilities using the same product were susceptible to this vulnerability.<br> \nThere is a significantly high volume of automated reconnaissance and exploitation attacks targeting devices accessible via the Internet.<br> \nFurthermore, the ICS network should be isolated from the business network as well.<br> ",
    "html_url": "https://blog.compass-security.com/2024/02/luring-the-threat-lessons-from-custom-ics-honeypots-in-ukraine-and-germany/",
    "text": "In today’s interconnected world, it is a well-known fact that systems with Internet exposure are under continual threat of cyber-attacks. This risk extends from private websites to corporate infrastructure. With the increasing modernization of Industrial Control Systems (ICS), these vital components also become more exposed to such threats. But what is the extent and nature of attacks against industrial infrastructure? Do certain countries, such as Ukraine, face a disproportionately high number of attacks? In this exploration, we delve into these questions, using data collected from honeypots mimicking different ICS products in both Ukraine and Germany, to better understand the landscape of cyber intrusions in this specific field.\n\nFundamentals of Industrial Control Systems\n\nIndustrial Control Systems (ICS) are crucial for monitoring and managing complex industrial processes and systems. They form a significant part of the broader Operational Technology (OT) family. These systems encompass various subgroups and components, including Programmable Logic Controllers (PLC), Supervisory Control and Data Acquisition (SCADA) systems, and Human-Machine Interfaces (HMI), among others.\n\nIn the evolving landscape of those systems, there has been a emergence of devices that serve as a bridge between traditional ICS components, using industrial protocols, and more modern technologies featuring, e.g., Internet connection via cellular network, HMI displays integrated into web interfaces, and more. The integration of modern technology into traditional Industrial Control Systems (ICS) not only facilitates greater operational flexibility but also significantly increases the attack surface, particularly due to the capability for direct remote management over the Internet.\n\nOverview of Documented Cyberattacks on ICS Infrastructure\n\nOften, attackers compromise the business network of an industrial company without directly impacting the Industrial Control System (ICS) infrastructure. A prime example of this is the incident at Colonial Pipeline, where the business systems were impacted by a ransomware attack. The attackers stole data and encrypted many internal business systems. As a precaution, the pipeline operations were temporarily halted to mitigate any risk to the operational network [1] [2]. To successfully interfere with an industrial process, attackers typically need a deep understanding of the underlying protocols, industrial processes, and sometimes ways to circumvent Safety Instrumented Systems (SIS).\n\nDue to the scarcity of publicly available data, obtaining a comprehensive view of direct attacks on ICS infrastructure remains challenging. A short overview about some public records:\n\n2010: Stuxnet ist the most popular attack regarding ICS infrastructure. The malware exploited four previously unknown security vulnerabilities. It specifically targeted Siemens PLC hardware used in uranium enrichment centrifuges. Stuxnet overran the centrifuges while manipulating sensor data to remain undetected, assumingly destroying about one-fifth of Iran’s centrifuges [3].\n2010: Presumed Iranian actors gained access to the SCADA system of a small dam in New York. However, the attack did not have any impact since the small remotely controllable sluice gate was disconnected for maintenance at the time of the intrusion [4][3].\n2013: Identified in 2013, the Havex malware utilized the OPC protocol to map industrial equipment and gather information about industrial systems. It is believed that the attackers targeted over 2’000 industrial sites, mainly in Europe and the US [5][6].\n2014: An undisclosed German steel mill suffered a significant cyber-attack on its ICS infrastructure. Attackers used social engineering to access the business network, subsequently compromising the industrial control systems. This caused a loss of control of the blast furnace, resulting in massive physical damage to the plant [7].\n2015: On December 23, 2015, a coordinated attack on three Ukrainian energy companies caused a power outage, affecting over 225’000 people. Around 50 regional substations experienced malicious remote operation conducted by multiple attackers. Furthermore, some industrial control systems had their existing firmware overwritten, making them inoperable [8].\n2016: On December 17, 2016, another attack named CRASHOVERRIDE struck the Ukrainian energy sector. The malware involved, causing a power outage for an undisclosed number of people. Unlike other ICS malware attacks, this one did not target specific product vulnerabilities. Instead, it exploited industrial communication protocols (OPC, IEC 61850, IEC 101, and IEC 104) to map network infrastructure and identify targets. Furthermore, the malware had the capability to erase systems and overwrite configuration files of industrial control systems [9].\n2011-2016: Various HMI systems from multiple manufacturers fell victim to an extensive, multi-year attack campaign on ICS. In some cases, initial access was obtained through a vulnerability in General Electric’s publicly accessible HMI system. This flaw allowed the system to execute an infected file, loading and running the Blackenergy malware. Additionally, it is likely that publicly accessible web-based SCADA software from Advantech/Broadwin were directly targeted as well [10].\n2019: A former employee used the still working remote access to tamper with the water cleaning process of the Post Rock Rural Water District with intention to harm. An employee noticed the changes and reversed the actions [11][12].\n2022: In September 2022, the hacktivist group GhostSec claimed to have compromised 55 Berghof Automation PLCs. The group disclosed some seized data from various controllers, identified as integrated HMI controllers accessible via a web browser. The precise impact of the attack remains unknown, highlighting that even less experienced groups can pose a threat to inadequately secured industrial control systems [13].\n2023: In November and December 2023, the Iranian-backed hacktivist group Cyber Avengers successfully compromised ICS devices at two water distribution facilities in the United States [14] and Ireland [15] by using the default password (CVE-2023-6448). While the US attack had no consumer impact, in Ireland, 160 households experienced a two-day freshwater cutoff.\n\nThese examples show that ICS are attacked by a variety of threat actors, including advanced persistent threats (APTs), hacktivists, and even insiders.\n\nThe Honeypot Environment\n\nWhile there are established honeypot solutions like Conpot or XPOT, their recognition among attackers might influence the results. Therefore, it was decided to manually recreate the web interface of existing products. It was hoped this approach would make the systems less recognizable as honeypots, at least on the first few interactions.\n\nSystem Architecture and Design\n\nGiven that manufacturers typically do not release source code for their systems, publicly reachable products were identified using shodan.io, an IoT search engine. Due to the large availability of example systems, it was chosen to partially recreate four different products:\n\nA Programmable Logic Controller (PLC) with a web interface.\nAn Industrial Cellular Gateway, which connects industrial systems to the Internet via mobile networks.\nA Human-Machine Interface (HMI) system with a web interface.\nA web-based SCADA (Supervisory Control and Data Acquisition) solution.\n\nThe static web content was copied from publicly available systems. For dynamic data, the API responses were studied and manually replicated. Functions that could alter the original system – such as information modifications, restarts, or firmware installations – were not tested or included in the replicas. Where assumptions about the behavior of these systems were necessary, generic error messages were implemented instead. All identifiable details, including company names, IP addresses, location data, and MAC addresses, were replaced with fictional counterparts, ensuring that the original systems remained unidentifiable.\n\nWhen accessing these emulated systems, visitors are greeted by the login page of the respective product. In line with the product manuals, the default credentials are valid on three of the four products. Visible information within these systems was carefully adjusted to reflect country-specific details, like location information, cellular providers, time zones etc. Additionally, some advanced functionalities were emulated, such as a web-based Command Line Interface (CLI). This feature allows for operations like internal network enumeration with ping, including simulated responses from various internal IP addresses.\n\nEach product was operated on dedicated Virtual Private Servers (VPS) operated by one of eight different cloud providers located in Ukraine or Germany. The systems were made accessible on their default ports, 80, 8080, and a non-standard HTTP port. Furthermore, additional infrastructure for monitoring and management have been deployed.\n\nFigure 1: High level infrastructure overview\n\nDuring the study, all network traffic was recorded and later analyzed using the Intrusion Detection System Suricata. This analysis used approximately 600 custom-written rules along with around 6,500 existing rules to categorize and analyze HTTP requests. Additional classifications, such as the type of attack, the year of the related CVE (Common Vulnerabilities and Exposures) or exploit, were manually added, particularly for larger clusters.\n\nInteraction categorization\n\nA whitelist approach was adopted to categorize every request as malicious or non-malicious. The following criteria were used.\n\nHTTP requests not classified as malicious:\n\nAll requests generated through the use of publicly available functions of the four ICS products.\nQueries for standard resources, like robots.txt, favicon.ico, and similar files.\nRequests exhibiting significant structural errors.\nConnection requests.\n\nHTTP requests classified as malicious:\n\nAny requests not falling into the above categories are considered malicious.\nAny requests containing malicious code which is detect by a Suricata rule.\nResults\n\nData was collected over a period of nearly three months, spanning from July 16, 2023, to October 14, 2023. During this time, the emulated ICS products recorded a total of 83’947 HTTP interactions, providing a large dataset for analysis.\n\nOut of the total interactions, 46’930 were categorized as malicious, while 37’017 were identified as non-malicious requests. The systems located in Germany recorded a marginally higher number of malicious requests, totaling 24’842, compared to those in Ukraine, which registered 22’088 such requests.\n\nGeographic Origin and Target Tendencies\n\nIn this experiment, the source IP of each attack was determined using the MaxMind GeoLite2 Country database. However, it is crucial to note that attributing cyber-attacks to specific countries based solely on source IP addresses is not reliable. Attackers often conceal their true location using methods like Proxies, VPNs, or by hijacking systems in different countries.\n\nThe map below visualizes the number of malicious HTTP-Requests to the honeypots attributed to various countries by the source IP. It shows that the honeypots received malicious requests from around the world. The United States tops the list with over 10’000 requests, followed by Canada and Germany. 41% of the malicious requests originated from those three countries.\n\nFigure 2: Malicious request by country\n\nA notable detail is the disproportion between malicious requests targeting Ukraine and Germany, with certain countries like Canada, France, and Turkey showing a heavy bias toward German systems. In contrast, the Russian Federation, Finland, Poland, and Sweden have sent more malicious requests to Ukraine. The intensity of the color on the map reflects the target tendency, with darker colors indicating a higher tendency to target the honeypots situated in either Ukraine or Germany.\n\nFigure 3: Target tendency by country\n\nThe bar chart below categorizes the top 20 countries by the number of malicious requests they have made to honeypot systems in Germany and Ukraine.\n\nFigure 4: Malicious request of the top 20 countries\nAutomated Attacks\n\nThe vast majority of attacks were not specifically targeting the simulated ICS. Instead, most attacks were rather typical web-based attacks observed on the Internet. This is explained by the fact that all systems exposed online are subject to constant scanning, and automated exploit attempts are made against a wide range of products.\n\n87.5% of the malicious request (41’054) have been categorized as forced browsing. These requests are part of reconnaissance activities, where attackers aim to discern product types, management portals, or directly access sensitive information. For instance, 8’049 requests tried to verify the presence of PHPMyAdmin, a popular database management framework. Another significant portion of these requests targeted the /.env file, presumably linked to the Laravel PHP web framework, which could contain sensitive information or secrets.\n\n4’007 malicious requests contained payloads leading to code execution, SQL injection, SSRF, XXE or authentication bypasses. At least 2’662 of those requests aimed to exploit specific vulnerabilities in specifics products. The majority of the exploits allows the attacker to execute their own code on the underlying operating system. The targets varied across a large number of products, including:\n\nNetworking devices such as routers from brands like D-Link, Netlink, LB-LINK, ToTolink, Netis, Linksys, and Fortinet.\nWeb CMS solutions, notably WordPress (along with its plugins), Joomla, Drupal, and Kentico.\nVarious applications and infrastructure components from VMware, Citrix, Zimbra, Apache, and Atlassian.\n\nFor 2’700 requests the payload age (based on the CVE or exploit code publishing date) has been determined. The data shows a consistent pattern of attacks using vulnerabilities from previous years, not just the most recent ones.\n\nFigure 5: Payload age (based on the CVE or exploit code publishing date)\n\nAdditionally, there were 1’573 requests attempting to log in to various products like WordPress, Artifactory, and Tenda routers.\n\nICS-Specific Attacks\nTargeting Other ICS Products\n\nReconnaissance activities targeting ICS were also evident. Across all eight systems, including those operating on non-standard HTTP ports, there were in total 61 requests probing for the presence of a page associated with the Siemens SIMATIC S7 Controller:\n\nGET /Portal/Portal.mwsl HTTP/1.1\nUser-Agent: curl/7.54.0\nConnection: close\nHost: [Redacted]\n\nThe bulk of these requests originated from two IP addresses located in the UK, followed by a significant number from Germany. A smaller portion of the requests came from IP addresses in the Netherlands and Russia.\n\nTargeting the Emulated ICS Products\n\n296 login attempts targeted the two emulated products. Out of those, a staggering 295 were directed at the Industrial Cellular Gateway, while the remaining single attempt targeted the SCADA system. In 10 instances, the attackers successfully used the correct username and password combination. However, contrary to expectations, these successful logins did not lead to any further authenticated requests on the products. Despite originating from various IP addresses in Russia, Poland, and Turkey, the attacks used similar credentials and identical HTTP request parameters like User-Agent, Accept and Accept-Language. This uniformity suggests the attack might be conducted by the same attacker or multiple attackers using the same toolkit.\n\nPOST /checklogin.php?action=1 HTTP/1.1\nOrigin: http://[Redacted]:8080\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif ,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Language: en-US\nCookie: PHPSESSID=ts41gvbiam5a9vkp6d5oq9lgft\nHost: [Redacted]:8080\nContent-Length: 44\n\nusername=admin&password=password&Login=Login\n\nOne product faced 84 attempts to exploit the vulnerability CVE-2023-1698. This vulnerability allows attackers to run commands on the operating system of the product. The attacks were geographically dispersed, with 43 HTTP requests targeting the system in Germany and 41 in Ukraine.\n\nIn 80 cases, the attacker issued the payload to execute the command id which would show the current users. In two separate requests, the command cat /etc/passwd was used, aiming to access information about user accounts. In two other cases they tried to download a script from an external source using wget.\n\nFrom 24 out of total 29 IP addresses, malicious requests were sent to systems in both Germany and Ukraine:\n\nFigure 6: Sources of attempted CVE-2023-1698 exploitations\n\nNotably, this specific exploitation attempt was absent in the other six honeypots, each emulating different ICS products, highlighting a targeted attack pattern on this particular vulnerability. Consequently, the attackers carried out reconnaissance activities to identify the product prior to launching attacks that contained specific exploits.\n\nAn example of the activities conducted by one of the attacker IP addresses:\n\nTimestamp\tSystem\tActivity\n03.08.2023 02:53:02\tHoneypot DE\tPerforming a HTTP-Request on web root\n03.08.2023 02:55:04\tHoneypot UA\tPerforming a HTTP-Request on web root\n03.08.2023 02:57:05\tHoneypot DE\tSend an HTTP Request with the exploit\n03.08.2023 02:57:05\tHoneypot UA\tSend an HTTP Request with the exploit\nBeyond the Honeypots: Identifying a Critical SCADA Security Flaw\n\nWhile constructing the SCADA honeypot, a misconfiguration in the original SCADA solution was identified. This flaw permitted unauthorized admin login access on the solution. Upon further examination, it was discovered that at least 20 water supply facilities using the same product were susceptible to this vulnerability.\n\nThis critical issue was immediately reported to both the manufacturer and the Computer Emergency Response Teams (CERT) of the affected country. The CERT classified the issue as high priority and took immediate action. This discovery, though incidental to the main research, underscores the pressing necessity for heightened security measures in this domain.\n\nConclusion and Recommendations\n\nThe data gathered from the honeypots does not provide any surprising new insights. Maybe due to the fact that the honeypots could be easily recognizable as decoy systems, possibly because they are hosted as Virtual Private Servers (VPS). Deploying these systems over cellular networks in the respective countries could yield different results and potentially provide more covert and realistic scenarios. However, the analysis of the collected data confirms several points:\n\nThere is a significantly high volume of automated reconnaissance and exploitation attacks targeting devices accessible via the Internet.\nKnown vulnerabilities in ICS components are actively exploited.\nBlocking IPs based on their country of origin can lower the number but does not mitigate these attacks.\n\nBased on this, we give the following recommendations:\n\nIn general, it is not recommended to expose non-security components directly to the Internet. If any remote access is required at all, it is recommended to use Virtual Private Networks (VPN) or another layer of security to protect the systems against direct attacks. If possible, only whitelisted IPs should be allowed. Furthermore, the ICS network should be isolated from the business network as well.\nA strong patch management process should be established. Security patches on Internet exposed systems should be applied within hours.\nMultifactor authentication and strong credentials should be used.\nLogging and monitoring of devices to detect attacks or suspicious usages should be performed.\n\nFurther recommendations regarding ICS security:\n\nRecommendations NCSC (CH)\nRecommendations BSI (DE)\nRecommendations CISA (US)\nRecommendations NIST (US)\nReferences\nhttps://www.techtarget.com/whatis/feature/Colonial-Pipeline-hack-explained-Everything-you-need-to-know\nhttps://www.law.georgetown.edu/environmental-law-review/blog/cybersecurity-policy-responses-to-the-colonial-pipeline-ransomware-attack/\nHemsley, Kevin E., and E. Fisher, Dr. Ronald. History of Industrial Control System Cyber Incidents. United States: N. p., 2018. Web. https://doi.org/10.2172/1505628\nhttps://www.justice.gov/opa/pr/seven-iranians-working-islamic-revolutionary-guard-corps-affiliated-entities-charged\nhttps://www.cisa.gov/news-events/ics-advisories/icsa-14-178-01\nhttps://www.dragos.com/blog/industry-news/the-evolution-of-cyber-attacks-on-electric-operations/\nhttps://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Securitysituation/IT-Security-Situation-in-Germany-2014.pdf\nhttps://info.publicintelligence.net/NCCIC-UkrainianPowerAttack.pdf\nhttps://www.dragos.com/wp-content/uploads/CrashOverride-01.pdf\nhttps://www.cisa.gov/news-events/ics-alerts/ics-alert-14-281-01e\nhttps://www.waterisac.org/portal/updated-october-21-2021-insider-threat-%E2%80%93-former-employee-indicted-unauthorized-computer\nhttps://www.waterisac.org/system/files/articles/travnichek-indictment.pdf\nhttps://www.otorio.com/blog/pro-palestinian-hacking-group-compromises-berghof-plcs-in-israel/\nhttps://edition.cnn.com/2023/12/01/politics/us-water-utilities-hack/index.html\nhttps://therecord.media/water-outage-in-ireland-county-mayo",
    "title": "Luring the Threat: Lessons from ICS Honeypots in Ukraine and Germany"
}
{
    "brief": "The following points are, in my opinion, some of the most important security controls that can be enforced and configured using Conditional Access to improve the overall security posture of your Azure or Microsoft 365 tenant.<br> \nAdditionally, should you need any introduction to what Entra Conditional Access is and which security controls are available, feel free to have a look at this post: https://blog.nviso.eu/2023/05/24/enforce-zero-trust-in-microsoft-365-part-3-introduction-to-conditional-access/.<br> \nEntra Conditional Access security controls Enforce strong authentication for all users<br> \nsomething you have: a phone, an application, a token, etc.<br> \nSo, if you are not doing it yet, make sure that all identities are regularly prompted multi-factor authentication when they are authenticating to your environment.<br> \nConditional Access policy – Require Multi-Factor Authentication for all users<br> \nOnce the policy is enabled, MFA will be required for all users when authenticating to a cloud application using their company account.<br> \nThe new policy can be configured in Entra ID > Protection > Authentication methods > Policies:<br> \nMicrosoft Entra Authentication Methods<br> \nFor instance, if I want to access a Tenant B Azure environment using an account in Tenant A, I could do it in two different ways:<br> \nAs MFA in the resource tenant is not enforced on my account, I will gain access to the environment without any further authentication requirements, “bypassing” MFA from my home tenant.<br> \nBecause of that, MFA should be enforced in the resource tenant (too) to prevent that a user account with a compromised password that has been invited as a guest user in your tenant could access your environment without any restrictions.<br> \nTherefore, when using legacy authentication, users are only prompted for their password to sign-in.<br> \nTo control the use of legacy authentication protocols across your Microsoft 365 environment, we recommend configuring a Conditional Access policy.<br> \nThe following policy can be used to directly block legacy authentication (recommended): Conditional Access policy – Block Legacy Authentication protocols To indirectly block legacy authentication, the grant control could be set to “Require multi-factor authentication”, “Require device to be marked as compliant”, and/or “Require Microsoft Entra hybrid joined device” instead of “Block”.<br> \nUsing a dedicated policy to block legacy authentication is recommended as exclusions on users, applications, locations, etc., that may apply for the above grant controls might not apply to the use of legacy authentication protocols in your environment.<br> \nBy default, the sign-in frequency in Entra ID is 90 days.<br> \nHow can the sign-in frequency be configured in Entra ID?<br> \n), Entra Conditional Access policies should be used.<br> \nAt the tenant level, it can be configured in the User settings by setting the Show keep user signed in toggle to On or Off:<br> \nMicrosoft Entra ID user settings<br> \nHowever, it is recommended to define it for every use case, such as user, including guest user, or administrative access, and access to sensitive resources or information, from managed or unmanaged devices, from trusted or untrusted locations, etc.<br> \nBecause of that, it is usually recommended to restrict those actions by requiring strong authentication and / or by requiring users to be in a trusted location.<br> \nNote that the “Devices to be Microsoft Entra joined or Microsoft Entra registered require multifactor authentication”-setting in Entra ID should be set to ‘No’ first, before configuring a Conditional Access policy to require MFA on device join or registration.<br> \nMicrosoft Entra ID device settings<br> \nThis can be done using a Conditional Access policy.<br> \nSign-in attempts from service principals can be covered by Conditional Access policies but it requires additional Entra ID Workload Identities Premium licenses.<br> \nThey are considered as the most secure option as you do not have to manage any credentials for them.<br> \nNote that it is recommended to use Conditional Access policies instead of the Identity Protection policies directly as Conditional Access allows for better granularity and more control over the configuration.<br> \nWhat authentication and verification methods are available in Microsoft Entra ID?<br> ",
    "html_url": "https://blog.nviso.eu/2024/02/27/top-things-that-you-might-not-be-doing-yet-in-entra-conditional-access/",
    "text": "Introduction\n\nIn this blog post, I focus on the top things that you might not be doing (yet) in Entra Conditional Access. It is not an exhaustive list, but it is based on my experience assessing many different Entra ID, formerly Azure AD, environments as a consultant at NVISO Security.\n\nThe following points are, in my opinion, some of the most important security controls that can be enforced and configured using Conditional Access to improve the overall security posture of your Azure or Microsoft 365 tenant. Note that items do not have a particular order in the list. They are all more or less equally important to correctly protect and secure identities in Entra ID as some might rely on others to be fully functional in terms of security or have the intended effect.\n\nPlease do keep in mind that this article focuses on features that require the Entra ID Premium P1 and P2 licenses . Therefore, if none of those licenses are available, check my previous blog post on how to protect identities in Entra ID Free: https://blog.nviso.eu/2023/05/02/enforce-zero-trust-in-microsoft-365-part-1-setting-the-basics/.\n\nAdditionally, should you need any introduction to what Entra Conditional Access is and which security controls are available, feel free to have a look at this post: https://blog.nviso.eu/2023/05/24/enforce-zero-trust-in-microsoft-365-part-3-introduction-to-conditional-access/.\n\nEntra Conditional Access security controls\nEnforce strong authentication for all users\n\nLicense requirement: Entra ID Premium P1\n\nStrong authentication, such as Multi-Factor Authentication (MFA), represents a huge improvement to the security posture of your identities. Indeed, according to Alex Weinert, based on studies conducted by Microsoft, the Director of Identity Security at Microsoft, using MFA reduces the likelihood of an account breach by 99.9% (reference: Your Pa$$word doesn’t matter – Microsoft Community Hub).\n\nBefore diving into more details, where are the main Multi-Factor Authentication types available?\n\nSomething you know: password, passphrase, PIN, etc.\nsomething you have: a phone, an application, a token, etc.\nSomething you are: biometrics, such as fingerprint, facial recognition, etc.\nSomewhere you are: IP address, geolocation, etc.\nAnd, something you do: set of actions and recognizable patterns of behavior.\n\nMost of them are available or can be enforced in Microsoft Entra, with the exception of “something you do”, which is the least common authentication type nowadays.\n\nMoreover, Multi-Factor Authentication is usually considered as relatively easy to implement compared to other solutions such as passwordless authentication as it does not (always) require the provisioning of additional hardware and software components, for instance. Indeed, MFA requirements can be satisfied using SMS, a phone call, or an application on a mobile phone. I will not go into the details of passwordless versus multi-factor authentication in this blog post, as each method has its own advantages and disadvantages.\n\nSo, if you are not doing it yet, make sure that all identities are regularly prompted multi-factor authentication when they are authenticating to your environment. There might be some exclusions for break-the-glass (emergency accounts) or service principals, but these should be documented and monitored to detect suspicious and anomalous activities.\n\nThe easiest way to enforce MFA in Entra Conditional Access is to create the following Conditional Access policy:\n\nConditional Access policy – Require Multi-Factor Authentication for all users\n\nNote that in this case, “All users” also includes B2B users.\n\nOnce the policy is enabled, MFA will be required for all users when authenticating to a cloud application using their company account. The MFA method, such as SMS, call, Microsoft Authenticator, Security Keys, etc., will depend on the configured policies in your environment. There are diverse ways to manage authentication methods in your environment. Some of them will be deprecated in the near future and combined into one unified configuration panel, which is Microsoft Entra Authentication Methods.\n\nFirst, we have the legacy MFA settings, which are going to be deprecated end September 2025, as you may have guessed based on the name. They can be configured by going to Entra ID > Security > Multifactor authentication > Additional cloud-based multifactor authentication settings:\n\nLegacy MFA settings\n\nThen, we have the possibility to configure the Self-Service Password Reset (SSPR) policy. The SSPR policy will be phased out at the same time as the legacy MFA settings in September 2025. However, it can be configured here: Entra ID > Password reset > Authentication methods:\n\nSelf-service password reset settings\n\nAs mentioned above, the Microsoft Entra Authentication Methods policies will be replacing the legacy MFA and SSPR policies after their deprecation date. The new policy can be configured in Entra ID > Protection > Authentication methods > Policies:\n\nMicrosoft Entra Authentication Methods\n\nIt is recommended to migrate to the new authentication methods policy as it provides better control and granularity over authentication methods. For that purpose, Microsoft provides a way to manage the migration to the new method. The different stages of the migration allow to start configuring the new policies but still respect the legacy MFA and SSPR policies and can be summarized in the following table:\n\nOption\tDescription\nPre-migration\tThe Authentication methods policy is used only for authentication.\nLegacy policy settings are respected.\nMigration in Progress\tThe Authentication methods policy is used for authentication and SSPR.\nLegacy policy settings are respected.\nMigration Complete\tOnly the Authentication methods policy is used for authentication and SSPR.\nLegacy policy settings are ignored.\n\nNote that before the migration, all policies are merged together, and all authentication methods are respected. This means that users will be able to use any authentication methods enabled in any of those policies.\n\nRegarding which authentication methods should be enabled for users, we recommend using stronger methods such as Microsoft Authenticator, security keys, One Time Passcode (OTP), Windows Hello, and certificate-based authentication. SMS and Voice methods are not the preferred ones as they are prone to different attacks. This does not mean that the other methods, listed as better and best below, cannot be targeted. This is why it is important to make sure that additional security controls have been implemented to make them more secure.\n\nAuthentication methods classification\nMake sure guest users are always authenticating with MFA\n\nLicense requirement: Entra ID Premium P1\n\nDuring security assessments, we have seen that, in some cases, MFA was not enforced on guest users. Indeed, in some configurations, they were either not included or excluded from Conditional Access policies enforcing strong authentication. The reason was that MFA was already enforced in their home tenant and guest users were prompted MFA twice, impacting user experience.\n\nHowever, guest users can bypass the MFA control from their home tenant if they directly access the resource tenant. For instance, if I want to access a Tenant B Azure environment using an account in Tenant A, I could do it in two different ways:\n\nLogin to the Azure Portal of Tenant A and use the switch button to access Tenant B, also known as the resource tenant. When doing so, I first need to satisfy all the requirements from the Tenant A, meaning password authentication (i.e., primary authentication) and then strong authentication with MFA (i.e., secondary authentication). Then, if MFA is not enforced for my account in the resource tenant, I will simply click on switch and get access without any further authentication requirements. Note that a user password is always managed in their home tenant and not in the resource tenant;\nInstead of accessing the resource tenant from my home tenant, I will directly browser to https://portal.azure.com/@tenantb.onmicrosoft.com. When clicking enter, I will be redirected to my home tenant for the primary authentication. Secondary authentication on my home tenant will not apply as I am not accessing a cloud application of my Tenant A. As MFA in the resource tenant is not enforced on my account, I will gain access to the environment without any further authentication requirements, “bypassing” MFA from my home tenant.\n\nBecause of that, MFA should be enforced in the resource tenant (too) to prevent that a user account with a compromised password that has been invited as a guest user in your tenant could access your environment without any restrictions.\n\nTo tackle the issue of double MFA prompt, Microsoft introduced the cross-tenant access settings which allows to trust the MFA claims of trusted external Entra ID tenants. This can be configured for different tenants individually or by default to apply to all B2B users from any tenants. We do not recommend trusting MFA claims from all external Entra ID tenants as you do not know how external identities are managed in their home tenant. However, this could be configured for trusted partners with whom you have a long-term collaboration and trust the way they secure and protect their identities. The authentication flow using cross-tenant access policies (XTAP) can be represented as follows:\n\nCross-tenant access policies (XTAP) flow\n\nIn this case, the user requests access to Tenant B resources from Tenant A. Therefore, they first need to perform primary authentication and satisfy Conditional Access policies, i.e., secondary authentication, in their home tenant. If satisfied, the flow continues. Then, when accessing the Tenant B, where XTAP policies to trust MFA from Tenant A have been configured, the authentication claim issued by Tenant A is validated against Tenant B Conditional Access policies. If satisfied, access to the resource tenant applications is granted.\n\nBlock legacy authentication protocols\n\nLicense requirement: Entra ID Premium P1\n\nLegacy authentication refers to authentication that does not support multi-factor authentication, as well as other controls, such as sending the device compliance or join status. Therefore, when using legacy authentication, users are only prompted for their password to sign-in. However, based on Microsoft, 97 percent of credential stuffing attacks use legacy authentication, and more than 99 percent of password spray attacks also use legacy authentication protocols.\n\nTo block such attacks, Microsoft started disabling Basic Authentication for Exchange Online in all Microsoft 365 tenants regardless of usage, except for SMTP Authentication, as of October 1, 2022.\n\nTo control the use of legacy authentication protocols across your Microsoft 365 environment, we recommend configuring a Conditional Access policy. There are two approaches for creating this policy: directly or indirectly blocking legacy authentication protocols.\n\nThe following policy can be used to directly block legacy authentication (recommended):\nConditional Access policy – Block Legacy Authentication protocols\nTo indirectly block legacy authentication, the grant control could be set to “Require multi-factor authentication”, “Require device to be marked as compliant”, and/or “Require Microsoft Entra hybrid joined device” instead of “Block”.\n\nUsing a dedicated policy to block legacy authentication is recommended as exclusions on users, applications, locations, etc., that may apply for the above grant controls might not apply to the use of legacy authentication protocols in your environment.\n\nRegularly force users to reauthenticate\n\nLicense requirement: Entra ID Premium P1\n\nNext to strong authentication, authentication session management, or sign-in frequency, is also important. The sign-in frequency will define how often users must re-authenticate to keep access to your environment.\n\nWhile requiring users to regularly reauthenticate might cause frustration and impact user productivity, it can effectively increase the overall security posture of an environment. Setting a proper sign-in frequency can help preventing unauthorized access to sensitive resources or information. By default, the sign-in frequency in Entra ID is 90 days. 90 days might be just fine for specific use cases, but I highly doubt that it will be considered as safe to use for most organizations for every use case.\n\nIt is important to note that when configuring such controls, we should not go too far and not be disruptive to users, as they will probably tend to find alternatives or “hacks” to bypass controls. Because of that, the sign-in frequency, to be effective in my opinion, should be based on conditions. For example, a user authenticating from a managed device in a trusted location represents an overall smaller risk than the same user authenticating from an unmanaged device outside of a trusted location. As a result, the sign-in frequency in the first scenario could be lower than for the second one. Moreover, an administrator assigned to the Entra ID Global Administrator role should also not have the same sign-in frequency as a standard user with no privileges. By implementing a proper sign-in frequency, it helps enforcing the principle of Zero Trust in the environment as access to resources is regularly challenged based on the context and signals.\n\nHow can the sign-in frequency be configured in Entra ID? Well, here also, we have different possibilities. First, we have the legacy setting in the per-user MFA portal:\n\nLegacy sign-in frequency configuration\n\nAs you can see in the above screenshot, this setting will apply tenant-wide and for all scenarios. Therefore, for more advanced configurations and reduce or increase the number of times users are prompted to reauthenticate based on different signals (i.e., location, device, risk, application, privileges, etc.), Entra Conditional Access policies should be used. Indeed, they allow for more granular configurations as we can target specific applications and users, and configure various conditions.\n\nNote that both settings should not be configured. Indeed, if Conditional Access is used to manage the sign-in frequency, which is greatly recommended, the legacy setting should be turned off to avoid impacting end users with unexpected MFA prompts, for example. If you want to know more information about this, I have already discussed those specificities in previous blog posts (e.g., https://blog.nviso.eu/2023/05/24/enforce-zero-trust-in-microsoft-365-part-3-introduction-to-conditional-access/). Feel free to check them out.\n\nBesides this, it is also possible to let users the possibility to trust the device they are using when authenticating. This is represented by the “Stay signed in?” checkbox when authenticating. This checkbox can be controlled in Conditional Access policies or at the tenant level. In Conditional Access, this behavior can be configured in the Session controls, by setting the ‘Persistent browser session‘-option to Always or Never persistent:\n\nConditional Access policy – Force sign-in frequency (SIF)\n\nAt the tenant level, it can be configured in the User settings by setting the Show keep user signed in toggle to On or Off:\n\nMicrosoft Entra ID user settings\n\nIn brief, defining the sign-in frequency and the browser persistence will vary for every organization. However, it is recommended to define it for every use case, such as user, including guest user, or administrative access, and access to sensitive resources or information, from managed or unmanaged devices, from trusted or untrusted locations, etc.\n\nRestrict sensitive user actions\n\nLicense requirement: Entra ID Premium P1\n\nUser actions in Entra Conditional Access policies represent actions that are performed by users, as its name suggests :). At the time of writing, Entra Conditional Access only supports two user actions, namely, register security information, and register or join devices to Entra ID. To better understand why those actions should be protected, let’s see what they actually mean:\n\nRegis­ter security information refers to the enrollment of an authentication method using the combined registration. In other words, it covers the action of a user adding an MFA method for their account. If registering security information is not restricted, attackers that would have compromised a user password might be able to register their own MFA to gain access to other cloud applications;\nRegister or join devices to Entra ID allows users to register or join a device to your Entra ID tenant. If device registration or join has not been restricted, someone might abuse it to register a device, get it enrolled in Microsoft Intune, assuming Automatic Enrollment is being used, get the configuration profiles and compliance policies assigned and finally gain access to protected resources that require a compliant device.\n\nBecause of that, it is usually recommended to restrict those actions by requiring strong authentication and / or by requiring users to be in a trusted location. Note that the “Devices to be Microsoft Entra joined or Microsoft Entra registered require multifactor authentication”-setting in Entra ID should be set to ‘No’ first, before configuring a Conditional Access policy to require MFA on device join or registration.\n\nMicrosoft Entra ID device settings\n\nThese restrictions will vary depending on your organization’s security requirements. Additional restrictions can be configured for registering or joining a device in Entra ID device settings.\n\nConfigure restrictions on service accounts\n\nLicense requirement: Entra ID Premium P1 & Entra ID Workload Identities Premium\n\nIn Entra ID, there are three types of service accounts: user-based service accounts, service principals, and managed identities. These identities are not meant for human access but represent an instance of an application used to access Entra ID or Azure resources such as services, APIs, etc.\n\nA user-based service account is simply a standard user account used as a service account. One common example is the Directory Synchronization Account which is used in hybrid environments. However, creating such accounts for your applications is not recommended as their passwords must be stored somewhere and managed making them more prone to credentials leak. If such accounts are used, their sign-ins should be restricted to specific locations and/or devices. This can be done using a Conditional Access policy.\n\nThen, service principals are a representation of an application object in Entra ID. These service accounts have two authentication methods available: secret- and certificate-based authentication. Certificate-based authentication is recommended as it cannot be (accidentally) hardcoded in the application code, making it less prone to credential leaks. Sign-in attempts from service principals can be covered by Conditional Access policies but it requires additional Entra ID Workload Identities Premium licenses. If available, it is recommended to restrict the use of the service principals to strict locations to prevent abuse in case of credential leak. Risk-based policies for service principals are also available and should be considered. For instance, access from service principals associated with a medium or high risk could be blocked:\n\nConditional Access policy – Workload Identity Risk policy\n\nFinally, managed identities are identities that can be associated with Azure resources to access other resources or services. They are considered as the most secure option as you do not have to manage any credentials for them. They cannot be covered by Conditional Access.\n\nFurther resources on how to secure those identities can be found below.\n\nEnforce restrictions based on user risk, and sign-in risk\n\nLicense requirement: Entra ID Premium P2, very limited feature in Entra ID Premium P1\n\nLast but not least, Entra Identity Protection signals can be included to Entra Conditional Access to automatically act upon user and sign-in risk. Identity Protection is a service that allows organizations to identify, investigate, and remediate risks related to identities. Entra Identity Protection calculates user and sign-in risk based on real-time and offline detections, such as anomalous token, atypical travel, credentials leak, possible attempt to access Primary Refresh Token (PRT), etc. The full list of detections for both Premium P2 customers, and Free or Premium P1 customers are available in the ‘Resources’-section.\n\nTo integrate Identity Protection signals into Conditional Access policies, Entra ID Premium P2 licenses are required. Note that it is recommended to use Conditional Access policies instead of the Identity Protection policies directly as Conditional Access allows for better granularity and more control over the configuration.\n\nAs a standard recommendation, user sign-ins that are associated with a medium or higher risk should require users to perform MFA. On the other hand, users associated with a high risk, should, at least, be requested to change their password.\n\nOnce implemented, it allows to reduce the risk of unauthorized access in case of account compromise or suspicious activities. Moreover, users with credentials that have leaked can be required to change their password to make sure their account cannot be abused.\n\nConclusion\n\nThe above security controls can help your organization enhance its cloud and identity security posture. Indeed, as identities have become the new perimeter in cloud environments, it is essential to implement strong controls around identities to safeguard your sensitive and critical resources. The above list highlights basic but important controls that should be considered when designing or reviewing your Entra Conditional Access implementation.\n\nWhile this list is not exhaustive and there are many more essential security controls to take into account, it can already be used to strengthen the defenses of your cloud environment. If some of these controls are not implemented yet in your environment, I highly encourage you to reevaluate your current controls and investigate the different capabilities discussed above.\n\nAt NVISO Security, we have built an expertise reviewing cloud environments and we have designed and implemented Entra Conditional Access policies on numerous occasions. If you want to know more about how we can help you in the journey of building or strengthening your cloud environment, feel free to connect on LinkedIn or visit our website at https://www.nviso.eu.\n\nResources\n\nYou can contact me on LinkedIn should you have any questions or remarks. My contact details can be found below.\n\nAdditionally, if you want to get a deeper understanding of some of the topics discussed in the blog post, all the resources that I have used can be found below:\n\nWhat authentication and verification methods are available in Microsoft Entra ID?: https://learn.microsoft.com/en-us/entra/identity/authentication/concept-authentication-methods\nManage authentication methods for Microsoft Entra ID: https://learn.microsoft.com/en-us/entra/identity/authentication/concept-authentication-methods-manage\nAuthentication and Conditional Access for External ID: https://learn.microsoft.com/en-us/entra/external-id/authentication-conditional-access\nBlock legacy authentication with Microsoft Entra Conditional Access: https://learn.microsoft.com/en-us/entra/identity/conditional-access/block-legacy-authentication\nConfigure authentication session management with Conditional Access: https://learn.microsoft.com/en-us/entra/identity/conditional-access/howto-conditional-access-session-lifetime\nConditional Access: Target resources – User actions: https://learn.microsoft.com/en-us/entra/identity/conditional-access/concept-conditional-access-cloud-apps#user-actions\nConditional Access for workload identities: https://learn.microsoft.com/en-us/entra/identity/conditional-access/workload-identity\nSecuring managed identities in Entra ID: https://learn.microsoft.com/en-us/entra/architecture/service-accounts-managed-identities\nSecuring service principals in Entra ID: https://learn.microsoft.com/en-us/entra/architecture/service-accounts-principal\nWhat are risk detections?: https://learn.microsoft.com/en-us/entra/id-protection/concept-identity-protection-risks\nAbout the author\nGuillaume Bossiroy\n\nGuillaume is a Senior Security Consultant in the Cloud Security Team. His main focus is on Microsoft Azure and Microsoft 365 security where he has gained extensive knowledge during many engagements, from designing and implementing Entra ID Conditional Access policies to deploying Microsoft 365 Defender security products.\n\nAdditionally, Guillaume is also interested into DevSecOps and has obtained the GIAC Cloud Security Automation (GCSA) certification.\n\nLinkedIn\nShare this:\nTwitterRedditWhatsAppEmail\nLike this:\nLoading...",
    "title": "Top things that you might not be doing (yet) in Entra Conditional Access"
}
{
    "brief": "I developed a tool that we named Mail-in-the-Middle (Maitm for short).<br> \nIf we positioned ourselves in between the sender of an email (be it a person or a system) and the legitimate recipient, we may be able to capture plenty of information about the business, including personally identifiable information, email verification processes, etc.<br> \nWhat if an attacker finds that they were receiving OTP’s for an account registration.<br> \nRegister a good number of typos of the target’s domain Configure the DNS with the MX record pointing to an attacker-controlled mail server Configure a catch-all email address to read all these “Stranded Emails”.<br> \nAs I’ve mentioned before, registering domains that are typo’s of the target’s domain (mostly domains that you would type if you fat-fingered an email address) is key.<br> \nFor example, if the target was mydomain.com, you would register domains like mydoain.com,  mydomian.com or mdyomian.com.<br> \nOnce we have registered a good number of these domains, we set the MX DNS records of all these domains to point to our mailbox.<br> \nThis is a good sign, the catch-all rule is working.<br> \nDepending on the configuration you have set, the flow should be similar to the following:<br> \nFilter emails you want (defined in filter.yml) Inject a tracking URL (if defined in injections.yml) Inject a UNC path as image to exfiltrate NetNTLM hashes (if defined injections.yml) Replace/Inject attached files (if defined in injections.yml) Replace legitimate links with attacker-controlled links (if defined in injections.yml) Fix typos on the destination(s) email address(es) (defined in typos.yml) Forward the email to the corrected email address (defined by the CLI argument -f).<br> \nThe source of the email can be defined in misc.yml, e.g. security@mircosoft.com.<br> \nNow that you know the general flow and functionality of Maitm, you just need it to run.<br> \nWhen you run Maitm on your server, you should see something like this in the console:<br> \nLeave this script running in background and when a recipient receives a email (and if the user allowed remote content to be displayed in the email client) you should get a hit on your tracking pixel and will be notified like this:<br> \nDiscord notification of a tracking pixel injected in a forwarded email being rendered in the target’s mail client.<br> \nWhen we think about the security implications of typo’d domains, we immediately think of phishing sent from that domain to our business, but we forget about the implications of the emails sent to that typo’d domain.<br> \nThe emails sent to these domains often contain a trove of sensitive data, which could include Personally Identifiable Information (PII), business infrastructure information, business meeting invites, bills, etc.<br> \nFor this attack, if an attacker defined an MX record for a similar domain, they are most likely receiving emails you were supposed to be receiving!<br> \nFor example, registering ms.com for microsoft.com and encouraging using the shorter version for email communications and user registration in third-party provider applications.<br> ",
    "html_url": "https://sensepost.com/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/",
    "text": "Context\n\nIn the chilly month of December 2023, my colleagues Jason (@BreakerOfSigns), Szymon (@TH3_GOAT_FARM3R), and myself (@felmoltor) were on a red team. This one was tough, but we had fun. We had to be a bit more creative than I am used to and two interesting things were done that are worth sharing: \n\nSzymon and Jason physically broke into the client’s facilities. At a branch office, they left an implant using Rogan’s “Slimjim” device and it proved to be a solid and production ready project. Try it out and let us know how it goes. \nI developed a tool that we named Mail-in-the-Middle (Maitm for short). You can find it in our Github repository here: https://github.com/sensepost/mail-in-the-middle. \n\nI cannot speak in first person about the physical breakin beyond praising the excellent social engineering skills of both of my colleagues, but I can talk about Mail-in-the-Middle. \n\nFirst, let me explain what is Mail-in-the-Middle and how we approached it. \n\nWhat is Maitm? \n\nThe idea is simple; take advantage of the typos that people make when they enter email addresses. If we positioned ourselves in between the sender of an email (be it a person or a system) and the legitimate recipient, we may be able to capture plenty of information about the business, including personally identifiable information, email verification processes, etc. This scenario is effectively a Person-in-the-Middle (PiTM), but for email communications.\n\nSome examples of how being positioned in the middle of email communications could be useful include: \n\nA vendor or third party would like to send out an invoice to the finance department of the target but they typo’d the domain. An attacker who owns the typo’d domain would receive these mails disclosing whatever information was contained within. This provides the attacker with a good pretext for a social engineering attack.\nLet’s say an administrator sets up a service to monitor performance of their servers, and proceeded to configure notifications / alarms to be sent to an email address where there was a typo within the domain. An attacker would receive those notifications which might disclose useful information about their internal infrastructure (for instance, software used, hostnames, IP addresses, etc.).\nOr perhaps an employee, from HR, registered an account on a third party service used to manage candidates applying for a job. But this was done using an email address where the domain was typo’d. Should the third party service send an email to that account, it would land in the hands of the attackers. An attacker could potentially perform an account takeover by requesting a password reset.\nWhat if an attacker finds that they were receiving OTP’s for an account registration. In this scenario, they could take advantage of this by actively forwarding on these emails on to the corrected target. This would give the attacker the ability to hijack the account later on should the victim user complete the registration process using the forwarded OTP.\nA more active approach could be taken by tainting all the emails coming in and forwarding them on to the legitimate recipient. Links can be modified to point to a phishing page, UNC paths can also be injected as images on the email or mail headers (see CVE-2023-35636) to exfiltrate NetNTLM hashes, or attachments can be injected to deliver your malicious payload. \n\nIn summary, doing this would be similar to receiving an Amazon package wrongly delivered to you, swapping the Rolex inside the package with the Casio, repackaging it, and leaving the parcel on your neighbours doorstep (hoping they don’t notice).  \n\nThe original idea of doing this mail interception manually was not ours (Szymon, Jason, or Felipe), but it was rather passed down from previous generations of SensePost to us (thank you Willem), and probably has been by many others out there. What we are presenting here is an improvement on the process and the automation of it.  \n\nBack to the point, to achieve a Mail-in-the-Middle position, there are three basic steps: \n\nRegister a good number of typos of the target’s domain\nConfigure the DNS with the MX record pointing to an attacker-controlled mail server\nConfigure a catch-all email address to read all these “Stranded Emails”.\n\nI like to call these “Stranded Emails”, just because I am a fan of Death Stranding and I am not a native English speaker, so I just make up words to sound like an intellectual. \n\nThe architecture of this setup is illustrated in the diagram below:\n\nThe green envelope is the original email sent to the wrong domain (mircosoft.com). The handsome hacker would catch that email, extract any sensitive information, if any or modify it and forward on.  \n\nAll this sounds a bit cumbersome to do manually. Hence, this is where the tool Mail-in-the-Middle can help you, which automates this process.  \n\nLet’s dig into how to set up the environment and use the tool. \n\nInfrastructure Preparation\n\nAs I’ve mentioned before, registering domains that are typo’s of the target’s domain (mostly domains that you would type if you fat-fingered an email address) is key. There are tools, such as dnstwist that can help you with discovering good domains to look at. For example, if the target was mydomain.com, you would register domains like mydoain.com,  mydomian.com or mdyomian.com. \n\nOnce we have registered a good number of these domains, we set the MX DNS records of all these domains to point to our mailbox. Following on our earlier example, querying the MX records of the domain using dig would return something like the following (a good tip to check for this if you are on the blue team and suspect something weird is going on!): \n\n$ dig mydoain.com mx +short\n10 mail.attacker.com. \n\nNow, configure a catch-all rule on the server to forward any email coming to a non-existent recipient to another trap email, for example to blackhole@attacker.com. \n\nWith a catch-all configured, if I go to our servers webmail, I often see plenty of rubbish and spam clogging my inbox. This is a good sign, the catch-all rule is working. You could expect like 5% of these emails to be useful (aka: not spam). \n\nMeeting invite including a passcode and details about the agenda\nInvoice for SAP sent to the wrong recipient\nAutomation\n\nThe objective of Maitm is to reduce my workload by automating the delivery of the spear-phishing style campaigns at scale. \n\nThe main ingredients of my tool were a handful of imap-tools, a pinch of discord-webhook and a spoonful of BeautifulSoup4. We mix all this magic in a hot pot and now the attacker can rely on a script to do automatic email modification and forwarding to intended users, all while they are relaxing: \n\nSimply put, the script is an infinite loop with the following logic: \n\nDepending on the configuration you have set, the flow should be similar to the following: \n\nLogin to a mailbox via SMTP and IMAP (defined in auth.yml).\nList emails, new or all (defined by the CLI argument -n).\nFilter emails you want (defined in filter.yml) \nInject a tracking URL (if defined in injections.yml) \nInject a UNC path as image to exfiltrate NetNTLM hashes (if defined injections.yml)\nReplace/Inject attached files (if defined in injections.yml)\nReplace legitimate links with attacker-controlled links (if defined in injections.yml)\nFix typos on the destination(s) email address(es) (defined in typos.yml) \nForward the email to the corrected email address (defined by the CLI argument -f).\nThe source of the email can be defined in misc.yml, e.g. security@mircosoft.com.\nThe destination can be set to a fixed address in case you want to test before going to production in misc.yml.\nNotify the Discord/Teams channel (defined in notifications.yml)\nRepeat the process again with new emails.\n\nNow that you know the general flow and functionality of Maitm, you just need it to run.\n\nRunning Maitm\n\nThe usage of the script requires you to tweak the yaml formatted configuration file (config/config.yml). This file contains the name of other files with a subset of configurations, such as “auth.yml”, “filter.yml”, “typos.yml”, “injections.yml”, etc. By editing these configuration files you would be able to adapt the tool to your needs as described before. For the full details of how to configure and run the tool, refer to the github project README. \n\nOnce configured, there are two ways you can run the tool, either by creating the virtual environment with pipenv or running it via Docker. Using it via Docker would be as easy as executing: \n\ndocker build -t maitm .       # Build \ndocker run --rm -ti maitm -h # To get help \ndocker run --rm -ti maitm -c config/config.yml -f –n\nResults\n\nWhen you run Maitm on your server, you should see something like this in the console: \n\nRunning Maitm\n\nWhen an email is forwarded and you have configured Discord or Teams, you will receive a message like this when some activity happens: \n\nDiscord notifications of forwarded emails with a summary of the result\n\nI also created another script to report a hit from a tracking pixel via Discord. For it to work you need to install the Apache mod forensics module and modify the path of your log file (variable LOG_FILE) where the script watching. You also need to create an .env file containing the discord webhook URL in the DISCORD_WEBHOOK variable. \n\nLeave this script running in background and when a recipient receives a email (and if the user allowed remote content to be displayed in the email client) you should get a hit on your tracking pixel and will be notified like this: \n\nDiscord notification of a tracking pixel injected in a forwarded email being rendered in the target’s mail client.\n\nIf you are lucky, after every one of these notifications, you will receive a NetNTLM hash on your server and, hoping the recipient has executed your attachment (assuming you’ve configured that), a new agent connection to your C2 infrastructure.\n\nTarget’s point of view when opening our mail with the UNC path injected \nNetNTLM hashes exfiltrated via UNC path injected in the tainted email\nConclusions \n\nWhen we think about the security implications of typo’d domains, we immediately think of phishing sent from that domain to our business, but we forget about the implications of the emails sent to that typo’d domain.  \n\nSetting up infrastructure that catches “stranded emails” as an attacker is a powerful attack piivimite. The emails sent to these domains often contain a trove of sensitive data, which could include Personally Identifiable Information (PII), business infrastructure information, business meeting invites, bills, etc. Attackers can take advantage of this to great effect by performing many actions such as completing employee enrolments or password resets on specific business-owned platforms, effectively leading to account takeovers. In my last Red Team we had good success with this, and almost surely you can put it in practice in yours as well.\n\nHaving a tool deal with “stranded email” monitoring, link and attachment replacement and more takes a significant workload off your shoulders, leaving you with more time to focus on other aspects of your testing. That, and sometimes when email delivery is fast (right after clicking that password reset button), it’s less suspicious :)\n\nRecommendations \n\nMitigating these kinds of attacks, from a business perspective, requires a multi-faceted approach. It’s not always possible to prevent human errors when typing email addresses or registering people in third-party web applications linked with your business. Some procedures and mechanisms to consider include: \n\nFrequent validation of data, specifically email address, of registered employees on third-party applications. Consider having a procedure for administrators of applications that describes that responsibility. \nImplement domain and user impersonation protection mechanisms on your email provider. For example, Microsoft has specific settings in their anti-phishing for user and domain impersonation. \nAll the recommendations that apply to typo squatting, also apply here: \nMonitor domains similar to yours. For this attack, if an attacker defined an MX record for a similar domain, they are most likely receiving emails you were supposed to be receiving! Request a take-down of that domain. \nThere are plenty of open-source projects on github to help with monitoring, as well as commercial solutions.\nRegister and park domains similar to yours, keeping them to prevent attackers from registering these themselves. Costs may be a concern, so focus only on the few most likely to be mistyped.  \nThe longer your business domain is, the higher the chance of a typo. An obvious mitigation would be to have a shorter domain name. Of course, this is hard to apply in hindsight. You are not going to change the name of your company just because you want a shorter domain name, or the company brand policy prevents this. Instead, an alternative option would be to register a shorthand for your domain for email communications. For example, registering ms.com for microsoft.com and encouraging using the shorter version for email communications and user registration in third-party provider applications.  \nUsual recommendations to protect your business against spear phishing campaigns also apply here. These range from continuous phishing simulation campaigns, employee awareness training, and clear procedures and mechanisms to report real phishing to the security team internally.\n\nUse the tool in your engagements and let me know how it goes.  \n\nHappy hunting! ",
    "title": "Mail in the Middle – A tool to automate spear phishing campaigns"
}
